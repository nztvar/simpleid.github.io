<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a10" title="SimpleID API Documentation (trunk)">
  <file path="extensions/hooks.php" hash="57ac550cad71749981b24bd3f6bbd46d" package="extensions">
    <docblock line="3">
      <description><![CDATA[This page lists out all the hooks which are available to SimpleID extensions.]]></description>
      <long-description><![CDATA[<p>When implementing these hooks in your extensions, you should replace the word
hook with the name of your extension.</p>]]></long-description>
      <tag line="3" name="package" description="extensions"/>
    </docblock>
    <function namespace="global" line="27" package="extensions">
      <name>hook_xrds_types</name>
      <full_name>\hook_xrds_types</full_name>
      <docblock line="13">
        <description><![CDATA[Returns an array of type URIs to be included in SimpleID's XRDS document.]]></description>
        <long-description><![CDATA[<p>For example:</p>

<pre><code><?php
return array('http://specs.openid.net/extensions/ui/1.0/lang-pref', 'http://specs.openid.net/extensions/ui/1.0/mode/popup');
?>
</code></pre>]]></long-description>
        <tag line="13" name="return" description="an array of URIs" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="13" name="since" description="0.7"/>
      </docblock>
    </function>
    <function namespace="global" line="52" package="extensions">
      <name>hook_checkid</name>
      <full_name>\hook_checkid</full_name>
      <docblock line="30">
        <description><![CDATA[Processes an authentication request that is <i>not</i> about an identifier.]]></description>
        <long-description><![CDATA[<p>The OpenID specifications provides a mechanism for extensions to process
authentication requests that are not about an identifier.  Authentication requests
about identifiers are automatically processed by the {@link simpleid_checkid_identity()}
function and the {@link hook_checkid_identity()} hooks.</p>

<p>Assertion results are coded within SimpleID as an integer between 127 ({@link CHECKID_OK})
and -127 ({@link CHECKID_PROTOCOL_ERROR}).  Positive values indicate a potential
positive assertion (subject to various types of user approval), while negative
values indicate a irrecoverable negative assertion.</p>

<p>This hook should return one of these values.  If the extension is unable to
handle this particular type of authentication request, it should return NULL.</p>]]></long-description>
        <tag line="30" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="30" name="param" description="true if openid.mode is checkid_immediate" type="bool" variable="$immediate">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="30" name="return" description="a return value from the list of possible values returned by {@link simpleid_checkid_identity()} or NULL" type="int">
          <type by_reference="false">int</type>
        </tag>
        <tag line="30" name="see" description="\global\simpleid_checkid()" refers="\global\simpleid_checkid()"/>
      </docblock>
      <argument line="52">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="52">
        <name>$immediate</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="83" package="extensions">
      <name>hook_checkid_identity</name>
      <full_name>\hook_checkid_identity</full_name>
      <docblock line="56">
        <description><![CDATA[Processes an authentication request where the assertion is potentially
positive.]]></description>
        <long-description><![CDATA[<p>Assertion results are coded within SimpleID as an integer between 127 ({@link CHECKID_OK})
and -127 ({@link CHECKID_PROTOCOL_ERROR}).  Positive values indicate a potential
positive assertion (subject to various types of user approval), while negative
values indicate a irrecoverable negative assertion.</p>

<p>Extensions are able to examine the authentication request to modify change
the assertion result from positive to negative.  As SimpleID takes the
minimum from the results returned by this hook, extensions are
not able to change the assertion result from negative to positive.</p>

<p>If the extension is indifferent to the result of the current authentication
request (e.g. it cannot understand it), it should return NULL.</p>

<p>This hook is not called at all if SimpleID determines that the assertion
is negative.</p>]]></long-description>
        <tag line="56" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="56" name="param" description="the identity to be checked against" type="string" variable="$identity">
          <type by_reference="false">string</type>
        </tag>
        <tag line="56" name="param" description="true if openid.mode is checkid_immediate" type="bool" variable="$immediate">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="56" name="return" description="a return value from the list of possible values returned by {@link simpleid_checkid_identity()} or NULL" type="int">
          <type by_reference="false">int</type>
        </tag>
        <tag line="56" name="see" description="\global\simpleid_checkid_identity()" refers="\global\simpleid_checkid_identity()"/>
      </docblock>
      <argument line="83">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="83">
        <name>$identity</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="83">
        <name>$immediate</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="112" package="extensions">
      <name>hook_response</name>
      <full_name>\hook_response</full_name>
      <docblock line="86">
        <description><![CDATA[Gets fields and values to be included in the OpenID response.]]></description>
        <long-description><![CDATA[<p>For positive assertions, this hook should assume that all user approvals
have been given and return a response array accordingly.  The extension has
the opportunity to modify the response what the user has actually approved
in the {@link hook_send() send hook}.</p>

<p>This hook will need to provide any aliases required.</p>

<p>An example:</p>

<pre><code><?php
$alias = openid_extension_alias($my_uri);
return array(
    'openid.ns.' . $alias => $my_uri,
    'openid.' . $alias . '.field' => 'value'
);
?>
</code></pre>]]></long-description>
        <tag line="86" name="param" description="true if a positive assertion is made, false otherwise" type="bool" variable="$assertion">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="86" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="86" name="return" description="the fields and values to include" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="112">
        <name>$assertion</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="112">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="135" package="extensions">
      <name>hook_signed_fields</name>
      <full_name>\hook_signed_fields</full_name>
      <docblock line="115">
        <description><![CDATA[Gets fields associated with this extension which needs to be signed]]></description>
        <long-description><![CDATA[<p>SimpleID automatically handles signing fields required by the OpenID
specification, so only the fields introduced by this extension
needed to be returned by this function.</p>

<p>The array of fields returned by this function must include any applicable
aliases as required.  For example</p>

<pre><code><?php
$alias = openid_extension_alias($my_uri);
return array($alias . '.field1', $alias . 'field2');
?>
</code></pre>]]></long-description>
        <tag line="115" name="param" description="the OpenID response to sign" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="115" name="return" description="an array of fields to sign" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="135">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="157" package="extensions">
      <name>hook_indirect_response</name>
      <full_name>\hook_indirect_response</full_name>
      <docblock line="138">
        <description><![CDATA[Determines the format in which assertions are sent, when they are sent via
indirect communication.]]></description>
        <long-description><![CDATA[<p>The OpenID specification version 2.0 provides for the sending of assertions
via indirect communication.  The original specifications provide that the
response should be formatted within the query string.</p>

<p>Some extensions to the OpenID specification allows the assertion to be
formatted in some other way, e.g. via the fragment.  This hook allows
extensions to specify which format the assertion should be sent.</p>

<p>If the extension is indifferent regarding the format, it should return
null</p>]]></long-description>
        <tag line="138" name="param" description="the URL of the RP to which the response is to be sent" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="138" name="param" description="the assertion to be sent" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="138" name="return" description="one of OPENID_RESPONSE_QUERY or OPENID_RESPONSE_FRAGMENT or NULL" type="int">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="157">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="157">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="172" package="extensions">
      <name>hook_rp_form</name>
      <full_name>\hook_rp_form</full_name>
      <docblock line="160">
        <description><![CDATA[Provides additional form items when displaying the relying party consent
form]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="160" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="160" name="param" description="the proposed OpenID response" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="160" name="param" description="the user's preferences saved with this relying party" type="array" variable="$rp">
          <type by_reference="false">array</type>
        </tag>
        <tag line="160" name="return" description="HTML code to be inserted into the verification form" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="160" name="see" description="\global\simpleid_consent_form()" refers="\global\simpleid_consent_form()"/>
        <tag line="160" name="deprecated" description="Use {@link hook_consent_form()}"/>
      </docblock>
      <argument line="172">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="172">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="172">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="187" package="extensions">
      <name>hook_consent_form</name>
      <full_name>\hook_consent_form</full_name>
      <docblock line="175">
        <description><![CDATA[Provides additional form items when displaying the relying party consent
form]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="175" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="175" name="param" description="the proposed OpenID response" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="175" name="param" description="the user's preferences saved with this relying party" type="array" variable="$rp">
          <type by_reference="false">array</type>
        </tag>
        <tag line="175" name="return" description="HTML code to be inserted into the verification form" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="175" name="see" description="\global\simpleid_consent_form()" refers="\global\simpleid_consent_form()"/>
        <tag line="175" name="since" description="0.8"/>
      </docblock>
      <argument line="187">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="187">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="187">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="209" package="extensions">
      <name>hook_send</name>
      <full_name>\hook_send</full_name>
      <docblock line="190">
        <description><![CDATA[Processes the relying party consent form.]]></description>
        <long-description><![CDATA[<p>This provides the extension with the opportunity to:</p>

<ul>
<li>modify the OpenID response based on the user's preferences by editing
$response</li>
<li>save the user's preferences by editing $rp</li>
</ul>

<p><strong>WARNING</strong> Because this function requires parameters to be
passed by reference, this does not work with {@link extension_invoke_all()}.</p>]]></long-description>
        <tag line="190" name="param" description="the data submitted by the user in the relying party verification form" type="array" variable="$form_request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="190" name="param" description="&amp;$response pointer to the proposed OpenID response" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="190" name="param" description="&amp;$rp pointer to the user's preferences saved with this relying party" type="array" variable="$rp">
          <type by_reference="false">array</type>
        </tag>
        <tag line="190" name="deprecated" description="Use {@link hook_consent()}"/>
      </docblock>
      <argument line="209">
        <name>$form_request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="209">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="209">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="231" package="extensions">
      <name>hook_consent</name>
      <full_name>\hook_consent</full_name>
      <docblock line="212">
        <description><![CDATA[Processes the relying party verification form.]]></description>
        <long-description><![CDATA[<p>This provides the extension with the opportunity to:</p>

<ul>
<li>modify the OpenID response based on the user's preferences by editing
$response</li>
<li>save the user's preferences by editing $rp</li>
</ul>

<p><strong>WARNING</strong> Because this function requires parameters to be
passed by reference, this does not work with {@link extension_invoke_all()}.</p>]]></long-description>
        <tag line="212" name="param" description="the data submitted by the user in the relying party verification form" type="array" variable="$form_request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="212" name="param" description="&amp;$response pointer to the proposed OpenID response" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="212" name="param" description="&amp;$rp pointer to the user's preferences saved with this relying party" type="array" variable="$rp">
          <type by_reference="false">array</type>
        </tag>
        <tag line="212" name="since" description="0.8"/>
      </docblock>
      <argument line="231">
        <name>$form_request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="231">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="231">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="243" package="extensions">
      <name>hook_routes</name>
      <full_name>\hook_routes</full_name>
      <docblock line="234">
        <description><![CDATA[Return any additional items provided by the extension to be appended to the
Simpleweb route array.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="234" name="see" description="\global\simpleweb.inc" refers="\global\simpleweb.inc"/>
        <tag line="234" name="see" description="\global\simpleid_start()" refers="\global\simpleid_start()"/>
        <tag line="234" name="return" description="the routes array" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="234" name="since" description="0.7"/>
      </docblock>
    </function>
    <function namespace="global" line="254" package="extensions">
      <name>hook_user_login_form</name>
      <full_name>\hook_user_login_form</full_name>
      <docblock line="246">
        <description><![CDATA[Provides additional form items when displaying the login form]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="246" name="param" description="he SimpleID location to which the user is directed if login is successful" type="string" variable="$destination">
          <type by_reference="false">string</type>
        </tag>
        <tag line="246" name="param" description="the current SimpleID state, if required by the location" type="string" variable="$state">
          <type by_reference="false">string</type>
        </tag>
        <tag line="246" name="see" description="\global\user_login_form()" refers="\global\user_login_form()"/>
      </docblock>
      <argument line="254">
        <name>$destination</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="254">
        <name>$state</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="270" package="extensions">
      <name>hook_user_auto_login</name>
      <full_name>\hook_user_auto_login</full_name>
      <docblock line="257">
        <description><![CDATA[Attempts to automatically login using credentials presented by the user agent.]]></description>
        <long-description><![CDATA[<p>This hook is called by the {@link user_auto_login()} function.  The hook
should detect any credentials present in the request and return a $user array
(loaded using the {@link user_load()} function) if credentials identifying
the user is present.</p>

<p>If no credentials are present, or the credentials are invalid, this hook
should return NULL.</p>]]></long-description>
        <tag line="257" name="return" description="the user array, or NULL" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="300" package="extensions">
      <name>hook_user_verify_credentials</name>
      <full_name>\hook_user_verify_credentials</full_name>
      <docblock line="273">
        <description><![CDATA[Verifies a set of credentials for a specified user.]]></description>
        <long-description><![CDATA[<p>A set of credentials comprises:</p>

<ul>
<li>A user name</li>
<li>Some kind of verifying information, such as a plaintext password, a hashed
password (e.g. digest) or some other kind of identifying information.</li>
</ul>

<p>The user name is passed to this function using the $uid parameter.  The user
name may or may not exist.  If the user name does not exist, this function
<strong>must</strong> return false.</p>

<p>The credentials are supplied as an array using the $credentials parameter.
Typically this array will be a subset of the $_POST superglobal passed to the
{@link user_login()} function.  Thus it will generally contain the keys 'pass' and
'digest'.</p>

<p>This hook must check whether the credentials supplied matches the credentials
for the specified user in the store.  If for any reason that credentials
do not match, this function <strong>must</strong> return false.</p>]]></long-description>
        <tag line="273" name="param" description="the name of the user to verify" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="273" name="param" description="the credentials supplied by the browser" type="array" variable="$credentials">
          <type by_reference="false">array</type>
        </tag>
        <tag line="273" name="return" description="whether the credentials supplied matches those for the specified user" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="300">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="300">
        <name>$credentials</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="318" package="extensions">
      <name>hook_page_dashboard</name>
      <full_name>\hook_page_dashboard</full_name>
      <docblock line="305">
        <description><![CDATA[Returns additional blocks to be displayed in the user's dashboard.]]></description>
        <long-description><![CDATA[<p>A block is coded as an array in accordance with the specifications set
out in {@link page.inc}.</p>

<p>This hook should return an <i>array</i> of blocks, i.e. an array of
arrays.</p>]]></long-description>
        <tag line="305" name="see" description="\global\page_dashboard()" refers="\global\page_dashboard()"/>
        <tag line="305" name="return" description="an array of blocks to add to the user's dashboard" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="305" name="since" description="0.7"/>
      </docblock>
    </function>
    <function namespace="global" line="334" package="extensions">
      <name>hook_page_profile</name>
      <full_name>\hook_page_profile</full_name>
      <docblock line="321">
        <description><![CDATA[Returns additional blocks to be displayed in the user's profile page.]]></description>
        <long-description><![CDATA[<p>A block is coded as an array in accordance with the specifications set
out in {@link page.inc}.</p>

<p>This hook should return an <i>array</i> of blocks, i.e. an array of
arrays.</p>]]></long-description>
        <tag line="321" name="see" description="\global\page_profile()" refers="\global\page_profile()"/>
        <tag line="321" name="return" description="an array of blocks to add to the user's profile page" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="321" name="since" description="0.7"/>
      </docblock>
    </function>
  </file>
  <file path="www/openid.inc.php" hash="ac58f6ba70caaa2787d318416c1049b7" package="simpleid">
    <docblock line="30">
      <description><![CDATA[OpenID related functions.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="30" name="package" description="simpleid"/>
      <tag line="30" name="filesource" description=""/>
    </docblock>
    <include line="37" type="Include Once" package="simpleid">
      <name>bignum.inc.php</name>
    </include>
    <include line="38" type="Include Once" package="simpleid">
      <name>random.inc.php</name>
    </include>
    <constant namespace="global" line="45" package="simpleid">
      <name>OPENID_DH_DEFAULT_MOD</name>
      <full_name>\OPENID_DH_DEFAULT_MOD</full_name>
      <value><![CDATA[((('155172898181473697471232257763715539915724801' . '966915404479707795314057629378541917580651227423698188993727816152646631') . '438561595825688188889951272158842675419950341258706556549803580104870537') . '681476726513255747040765857479291291572334510643245094715007229621094194') . '349783925984760375594985848253359305585439638443']]></value>
      <docblock line="40">
        <description><![CDATA[OpenID default modulus for Diffie-Hellman key exchange.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="40" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#pvalue" link="http://openid.net/specs/openid-authentication-1_1.html#pvalue,"/>
      </docblock>
    </constant>
    <constant namespace="global" line="54" package="simpleid">
      <name>OPENID_DH_DEFAULT_GEN</name>
      <full_name>\OPENID_DH_DEFAULT_GEN</full_name>
      <value><![CDATA['2']]></value>
      <docblock line="51">
        <description><![CDATA[OpenID default generator for Diffie-Hellman key exchange.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="57" package="simpleid">
      <name>OPENID_VERSION_2</name>
      <full_name>\OPENID_VERSION_2</full_name>
      <value><![CDATA[2]]></value>
      <docblock line="56">
        <description><![CDATA[Constant for the global variable {@link $version}]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="59" package="simpleid">
      <name>OPENID_VERSION_1_1</name>
      <full_name>\OPENID_VERSION_1_1</full_name>
      <value><![CDATA[1]]></value>
      <docblock line="58">
        <description><![CDATA[Constant for the global variable {@link $version}]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="62" package="simpleid">
      <name>OPENID_NS_2_0</name>
      <full_name>\OPENID_NS_2_0</full_name>
      <value><![CDATA['http://specs.openid.net/auth/2.0']]></value>
      <docblock line="61">
        <description><![CDATA[Constant for OpenID namespace]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="64" package="simpleid">
      <name>OPENID_NS_1_1</name>
      <full_name>\OPENID_NS_1_1</full_name>
      <value><![CDATA['http://openid.net/signon/1.1']]></value>
      <docblock line="63">
        <description><![CDATA[Constant for OpenID namespace]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="66" package="simpleid">
      <name>OPENID_NS_1_0</name>
      <full_name>\OPENID_NS_1_0</full_name>
      <value><![CDATA['http://openid.net/signon/1.0']]></value>
      <docblock line="65">
        <description><![CDATA[Constant for OpenID namespace]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="73" package="simpleid">
      <name>OPENID_IDENTIFIER_SELECT</name>
      <full_name>\OPENID_IDENTIFIER_SELECT</full_name>
      <value><![CDATA['http://specs.openid.net/auth/2.0/identifier_select']]></value>
      <docblock line="68">
        <description><![CDATA[Constant for the OP-local identifier which indicates that SimpleID should choose an identifier]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="68" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#anchor27" link="http://openid.net/specs/openid-authentication-2_0.html#anchor27"/>
      </docblock>
    </constant>
    <constant namespace="global" line="75" package="simpleid">
      <name>OPENID_RETURN_TO</name>
      <full_name>\OPENID_RETURN_TO</full_name>
      <value><![CDATA['http://specs.openid.net/auth/2.0/return_to']]></value>
      <docblock line="74">
        <description><![CDATA[Constant for the XRDS service type for return_to verification]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="78" package="simpleid">
      <name>OPENID_RESPONSE_QUERY</name>
      <full_name>\OPENID_RESPONSE_QUERY</full_name>
      <value><![CDATA[0]]></value>
      <docblock line="77">
        <description><![CDATA[Parameter for {@link openid_indirect_response_url()}]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="80" package="simpleid">
      <name>OPENID_RESPONSE_FRAGMENT</name>
      <full_name>\OPENID_RESPONSE_FRAGMENT</full_name>
      <value><![CDATA[1]]></value>
      <docblock line="79">
        <description><![CDATA[Parameter for {@link openid_indirect_response_url()}]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="982" package="simpleid">
      <name>OPENID_SHA1_BLOCKSIZE</name>
      <full_name>\OPENID_SHA1_BLOCKSIZE</full_name>
      <value><![CDATA[64]]></value>
    </constant>
    <constant namespace="global" line="1028" package="simpleid">
      <name>OPENID_SHA256_SUPPORTED</name>
      <full_name>\OPENID_SHA256_SUPPORTED</full_name>
      <value><![CDATA[false]]></value>
      <docblock line="1027">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="1027" name="ignore" description=""/>
      </docblock>
    </constant>
    <function namespace="global" line="101" package="simpleid">
      <name>openid_get_version</name>
      <full_name>\openid_get_version</full_name>
      <docblock line="91">
        <description><![CDATA[Detects the OpenID version of the current request]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="91" name="param" description="the OpenID request" type="mixed" variable="$request">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="91" name="param" description="the key to look for to determine the OpenID version" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="91" name="return" description="either OPENID_VERSION_2 or OPENID_VERSION_1_1" type="float">
          <type by_reference="false">float</type>
        </tag>
        <tag line="91" name="see" description="\global\$version" refers="\global\$version"/>
      </docblock>
      <argument line="101">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="101">
        <name>$key</name>
        <default><![CDATA['openid.ns']]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="117" package="simpleid">
      <name>openid_direct_message</name>
      <full_name>\openid_direct_message</full_name>
      <docblock line="107">
        <description><![CDATA[Creates a OpenID message for direct response.]]></description>
        <long-description><![CDATA[<p>The response will be encoded using Key-Value Form Encoding.</p>]]></long-description>
        <tag line="107" name="param" description="the data in the response" type="array" variable="$data">
          <type by_reference="false">array</type>
        </tag>
        <tag line="107" name="param" description="the message version" type="float" variable="$version">
          <type by_reference="false">float</type>
        </tag>
        <tag line="107" name="return" description="the message in key-value form encoding" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="107" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#kvform" link="http://openid.net/specs/openid-authentication-1_1.html#anchor32,"/>
      </docblock>
      <argument line="117">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="117">
        <name>$version</name>
        <default><![CDATA[OPENID_VERSION_2]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="142" package="simpleid">
      <name>openid_direct_response</name>
      <full_name>\openid_direct_response</full_name>
      <docblock line="136">
        <description><![CDATA[Sends a direct response.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="136" name="param" description="an OpenID message encoded using Key-Value Form" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="136" name="param" description="the HTTP status to send" type="string" variable="$status">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="142">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="142">
        <name>$status</name>
        <default><![CDATA['200 OK']]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="163" package="simpleid">
      <name>openid_indirect_message</name>
      <full_name>\openid_indirect_message</full_name>
      <docblock line="153">
        <description><![CDATA[Creates a OpenID message for indirect response.]]></description>
        <long-description><![CDATA[<p>The response will be encoded using HTTP Encoding.</p>]]></long-description>
        <tag line="153" name="param" description="the data in the response" type="array" variable="$data">
          <type by_reference="false">array</type>
        </tag>
        <tag line="153" name="param" description="the message version" type="float" variable="$version">
          <type by_reference="false">float</type>
        </tag>
        <tag line="153" name="return" description="the message" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="153" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#indirect_comm" link="http://openid.net/specs/openid-authentication-2_0.html#indirect_comm"/>
      </docblock>
      <argument line="163">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="163">
        <name>$version</name>
        <default><![CDATA[OPENID_VERSION_2]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="186" package="simpleid">
      <name>openid_indirect_response</name>
      <full_name>\openid_indirect_response</full_name>
      <docblock line="173">
        <description><![CDATA[Sends an indirect response to a URL.]]></description>
        <long-description><![CDATA[<p>The indirect message is encoded in the URL and returned to the user agent using
a HTTP redirect response.  The message can be encoded in either the query component
or the fragment component of the URL.</p>]]></long-description>
        <tag line="173" name="param" description="the URL to which the response is to be sent" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="173" name="param" description="an OpenID message, which can either be an array of keys and values, or a URL-encoded query string" type="array|string" variable="$message">
          <type by_reference="false">array</type>
          <type by_reference="false">string</type>
        </tag>
        <tag line="173" name="param" description="the component of the URL in which the indirect message is encoded, either OPENID_RESPONSE_QUERY or OPENID_RESPONSE_FRAGMENT" type="int" variable="$component">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="186">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="186">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="186">
        <name>$component</name>
        <default><![CDATA[OPENID_RESPONSE_QUERY]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="208" package="simpleid">
      <name>openid_indirect_response_url</name>
      <full_name>\openid_indirect_response_url</full_name>
      <docblock line="197">
        <description><![CDATA[Encodes an indirect message into a URL]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="197" name="param" description="the URL to which the response is to be sent" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="197" name="param" description="an OpenID message, which can either be an array of keys and values, or a URL-encoded query string" type="array|string" variable="$message">
          <type by_reference="false">array</type>
          <type by_reference="false">string</type>
        </tag>
        <tag line="197" name="param" description="the component of the URL in which the indirect message is encoded, either OPENID_RESPONSE_QUERY or OPENID_RESPONSE_FRAGMENT" type="int" variable="$component">
          <type by_reference="false">int</type>
        </tag>
        <tag line="197" name="return" description="the URL to which the response is to be sent, with the encoded message" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="208">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="208">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="208">
        <name>$component</name>
        <default><![CDATA[OPENID_RESPONSE_QUERY]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="260" package="simpleid">
      <name>openid_urlencode_message</name>
      <full_name>\openid_urlencode_message</full_name>
      <docblock line="253">
        <description><![CDATA[Encodes a message in application/x-www-form-urlencoded format.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="253" name="param" description="the OpenID message to encode" type="array" variable="$message">
          <type by_reference="false">array</type>
        </tag>
        <tag line="253" name="return" description="the encoded message" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="253" name="since" description="0.8"/>
      </docblock>
      <argument line="260">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="279" package="simpleid">
      <name>openid_direct_error</name>
      <full_name>\openid_direct_error</full_name>
      <docblock line="270">
        <description><![CDATA[Sends a direct message indicating an error.]]></description>
        <long-description><![CDATA[<p>This is a convenience function
for {@link openid_direct_response()}.</p>]]></long-description>
        <tag line="270" name="param" description="the error message" type="string" variable="$error">
          <type by_reference="false">string</type>
        </tag>
        <tag line="270" name="param" description="any additional data to be sent with the error message" type="array" variable="$additional">
          <type by_reference="false">array</type>
        </tag>
        <tag line="270" name="param" description="the message version" type="float" variable="$version">
          <type by_reference="false">float</type>
        </tag>
      </docblock>
      <argument line="279">
        <name>$error</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="279">
        <name>$additional</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
      <argument line="279">
        <name>$version</name>
        <default><![CDATA[OPENID_VERSION_2]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="296" package="simpleid">
      <name>openid_indirect_error</name>
      <full_name>\openid_indirect_error</full_name>
      <docblock line="284">
        <description><![CDATA[Sends an indirect message indicating an error.]]></description>
        <long-description><![CDATA[<p>This is a convenience function
for {@link openid_indirect_response()}.</p>]]></long-description>
        <tag line="284" name="param" description="the URL to which the error message is to be sent" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="284" name="param" description="the error message" type="string" variable="$error">
          <type by_reference="false">string</type>
        </tag>
        <tag line="284" name="param" description="any additional data to be sent with the error message" type="array" variable="$additional">
          <type by_reference="false">array</type>
        </tag>
        <tag line="284" name="param" description="the message version" type="float" variable="$version">
          <type by_reference="false">float</type>
        </tag>
        <tag line="284" name="param" description="the component of the URL in which the indirect message is encoded, either OPENID_RESPONSE_QUERY or OPENID_RESPONSE_FRAGMENT" type="int" variable="$component">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="296">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="296">
        <name>$error</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="296">
        <name>$additional</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
      <argument line="296">
        <name>$version</name>
        <default><![CDATA[OPENID_VERSION_2]]></default>
        <type/>
      </argument>
      <argument line="296">
        <name>$component</name>
        <default><![CDATA[OPENID_RESPONSE_QUERY]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="309" package="simpleid">
      <name>openid_get_realm</name>
      <full_name>\openid_get_realm</full_name>
      <docblock line="301">
        <description><![CDATA[Gets the realm from the OpenID request.]]></description>
        <long-description><![CDATA[<p>This is specified differently
depending on the OpenID version.</p>]]></long-description>
        <tag line="301" name="param" description="the OpenID request" type="mixed" variable="$request">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="301" name="param" description="the OpenID version for the message" type="float" variable="$version">
          <type by_reference="false">float</type>
        </tag>
        <tag line="301" name="return" description="the realm URI" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="309">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="309">
        <name>$version</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="333" package="simpleid">
      <name>openid_parse_direct_message</name>
      <full_name>\openid_parse_direct_message</full_name>
      <docblock line="325">
        <description><![CDATA[Parses a direct message.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="325" name="param" description="the direct message to parse" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="325" name="return" description="an array containing the parsed key-value pairs" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="325" name="since" description="0.7"/>
      </docblock>
      <argument line="333">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="355" package="simpleid">
      <name>openid_parse_query</name>
      <full_name>\openid_parse_query</full_name>
      <docblock line="345">
        <description><![CDATA[Parses a query string.]]></description>
        <long-description><![CDATA[<p>Query strings can be used to receive OpenID indirect messages.</p>]]></long-description>
        <tag line="345" name="param" description="the query string to parse" type="string" variable="$query">
          <type by_reference="false">string</type>
        </tag>
        <tag line="345" name="return" description="an array containing the parsed key-value pairs" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="345" name="since" description="0.7"/>
      </docblock>
      <argument line="355">
        <name>$query</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="378" package="simpleid">
      <name>openid_parse_request</name>
      <full_name>\openid_parse_request</full_name>
      <docblock line="371">
        <description><![CDATA[Parses the OpenID request to extract namespace information.]]></description>
        <long-description><![CDATA[<p>This function builds a map between namespace aliases and their Type URIs.</p>]]></long-description>
        <tag line="371" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="378">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="408" package="simpleid">
      <name>openid_url_matches_realm</name>
      <full_name>\openid_url_matches_realm</full_name>
      <docblock line="389">
        <description><![CDATA[Determines whether a URL matches a realm.]]></description>
        <long-description><![CDATA[<p>A URL matches a realm if:</p>

<ol>
<li>The URL scheme and port of the URL are identical to those in the realm.
See RFC 3986, section 3.1 for rules about URI matching.</li>
<li>The URL's path is equal to or a sub-directory of the realm's path.</li>
<li>Either:
(a) The realm's domain contains the wild-card characters "<em>.", and the
   trailing part of the URL's domain is identical to the part of the
   realm following the "</em>." wildcard, or
(b) The URL's domain is identical to the realm's domain</li>
</ol>]]></long-description>
        <tag line="389" name="param" description="to URL to test" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="389" name="param" description="the realm" type="string" variable="$realm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="389" name="return" description="true if the URL matches the realm" type="bool">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="389" name="since" description="0.6"/>
      </docblock>
      <argument line="408">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="408">
        <name>$realm</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="456" package="simpleid">
      <name>openid_realm_discovery_url</name>
      <full_name>\openid_realm_discovery_url</full_name>
      <docblock line="444">
        <description><![CDATA[Returns the URL of a relying party endpoint for a specified realm.]]></description>
        <long-description><![CDATA[<p>This URL
is used to discover services associated with the realm.</p>

<p>If the realm's domain contains the wild-card characters "*.", this is substituted
with "www.".</p>]]></long-description>
        <tag line="444" name="param" description="the realm" type="string" variable="$realm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="444" name="url" description="string the URL"/>
        <tag line="444" name="since" description="0.7"/>
      </docblock>
      <argument line="456">
        <name>$realm</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="489" package="simpleid">
      <name>openid_verify_return_to</name>
      <full_name>\openid_verify_return_to</full_name>
      <docblock line="474">
        <description><![CDATA[Verifies a return_to URL against the actual URL of the HTTP request.]]></description>
        <long-description><![CDATA[<p>The return_to URL matches if:</p>

<ul>
<li>The URL scheme, authority, and path are the same; and</li>
<li>Any query parameters that are present in the return_to URL are also present
with the same values in the actual request.</li>
</ul>]]></long-description>
        <tag line="474" name="param" description="the URL specified in the openid.return_to parameter" type="string" variable="$return_to">
          <type by_reference="false">string</type>
        </tag>
        <tag line="474" name="param" description="the actual URL requested" type="string" variable="$actual_url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="474" name="return" description="true if the URLs match" type="bool">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="474" name="since" description="0.7"/>
      </docblock>
      <argument line="489">
        <name>$return_to</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="489">
        <name>$actual_url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="537" package="simpleid">
      <name>openid_extension_filter_request</name>
      <full_name>\openid_extension_filter_request</full_name>
      <docblock line="524">
        <description><![CDATA[Filters an OpenID request to find keys specific to an extension, as specified
by the Type URI.]]></description>
        <long-description><![CDATA[<p>For exmaple, if the extension has the Type URI http://example.com/ and the
alias example, this function will return an array of all the keys in the
OpenID request which starts with openid.example</p>]]></long-description>
        <tag line="524" name="param" description="the Type URI of the extension" type="string" variable="$ns">
          <type by_reference="false">string</type>
        </tag>
        <tag line="524" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="524" name="return" description="the filtered request, with the prefix (in the example above, openid.example.) stripped in the keys." type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="537">
        <name>$ns</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="537">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="566" package="simpleid">
      <name>openid_extension_requested</name>
      <full_name>\openid_extension_requested</full_name>
      <docblock line="559">
        <description><![CDATA[Determines whether an extension is present in an OpenID request.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="559" name="param" description="the Type URI of the extension" type="string" variable="$ns">
          <type by_reference="false">string</type>
        </tag>
        <tag line="559" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="559" name="return" description="true if the extension is present in the request" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="566">
        <name>$ns</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="566">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="595" package="simpleid">
      <name>openid_extension_alias</name>
      <full_name>\openid_extension_alias</full_name>
      <docblock line="583">
        <description><![CDATA[Returns the OpenID alias for an extension, given a Type URI, based on the
alias definitions in the current OpenID request.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="583" name="param" description="the Type URI" type="string" variable="$ns">
          <type by_reference="false">string</type>
        </tag>
        <tag line="583" name="param" description="whether to create an alias if the Type URI does not already have an alias in the current OpenID request. If this parameter is a string, then the string specified is the preferred alias to be created, unless a collision occurs" type="bool|string" variable="$create">
          <type by_reference="false">bool</type>
          <type by_reference="false">string</type>
        </tag>
        <tag line="583" name="return" description="the alias, or NULL if the Type URI does not already have an alias in the current OpenID request &lt;i&gt;and&lt;/i&gt; $create is false" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="595">
        <name>$ns</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="595">
        <name>$create</name>
        <default><![CDATA[FALSE]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="629" package="simpleid">
      <name>openid_nonce</name>
      <full_name>\openid_nonce</full_name>
      <docblock line="623">
        <description><![CDATA[Generates a nonce for use in OpenID responses]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="623" name="return" description="an OpenID nonce" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="623" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#positive_assertions" link="http://openid.net/specs/openid-authentication-2_0.html#positive_assertions"/>
      </docblock>
    </function>
    <function namespace="global" line="642" package="simpleid">
      <name>openid_association_types</name>
      <full_name>\openid_association_types</full_name>
      <docblock line="635">
        <description><![CDATA[Returns the association types supported by this server.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="635" name="return" description="an array containing the association types supported by this server as keys and an array containing the key size (mac_size) and HMAC function (hmac_func) as values" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="662" package="simpleid">
      <name>openid_session_types</name>
      <full_name>\openid_session_types</full_name>
      <docblock line="648">
        <description><![CDATA[Returns the association types supported by this server and the version of
OpenID.]]></description>
        <long-description><![CDATA[<p>OpenID version 1 supports an empty string as the session type.  OpenID version 2
reqires a session type to be sent.</p>]]></long-description>
        <tag line="648" name="param" description="whether the transport layer encryption is used for the current connection" type="bool" variable="$is_https">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="648" name="param" description="the OpenID version, either OPENID_VERSION_1_1 and OPENID_VERSION_2" type="float" variable="$version">
          <type by_reference="false">float</type>
        </tag>
        <tag line="648" name="return" description="an array containing the session types supported by this server as keys and an array containing the hash function (hash_func) as values" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="662">
        <name>$is_https</name>
        <default><![CDATA[FALSE]]></default>
        <type/>
      </argument>
      <argument line="662">
        <name>$version</name>
        <default><![CDATA[OPENID_VERSION_2]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="690" package="simpleid">
      <name>openid_dh_server_assoc</name>
      <full_name>\openid_dh_server_assoc</full_name>
      <docblock line="675">
        <description><![CDATA[Generates the cryptographic values required for responding to association
requests]]></description>
        <long-description><![CDATA[<p>This involves generating a key pair for the OpenID provider, then calculating
the shared secret.  The shared secret is then used to encrypt the MAC key.</p>]]></long-description>
        <tag line="675" name="param" description="the MAC key, in binary representation" type="string" variable="$mac_key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="675" name="param" description="the consumer's public key, in Base64 representation" type="string" variable="$dh_consumer_public">
          <type by_reference="false">string</type>
        </tag>
        <tag line="675" name="param" description="modulus - a large prime number" type="string" variable="$dh_modulus">
          <type by_reference="false">string</type>
        </tag>
        <tag line="675" name="param" description="generator - a primitive root modulo" type="string" variable="$dh_gen">
          <type by_reference="false">string</type>
        </tag>
        <tag line="675" name="param" description="the hash function" type="string" variable="$hash_func">
          <type by_reference="false">string</type>
        </tag>
        <tag line="675" name="return" description="an array containing (a) dh_server_public - the server's public key (in Base64), and (b) enc_mac_key encrypted MAC key (in Base64), encrypted using the Diffie-Hellman shared secret" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="690">
        <name>$mac_key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="690">
        <name>$dh_consumer_public</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="690">
        <name>$dh_modulus</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="690">
        <name>$dh_gen</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="690">
        <name>$hash_func</name>
        <default><![CDATA['_openid_sha1']]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="715" package="simpleid">
      <name>openid_dh_consumer_assoc</name>
      <full_name>\openid_dh_consumer_assoc</full_name>
      <docblock line="704">
        <description><![CDATA[Complete association by obtaining the session MAC key from the key obtained
from the Diffie-Hellman key exchange]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="704" name="param" description="the encrypted session MAC key, in Base64 represnetation" type="string" variable="$enc_mac_key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="704" name="param" description="the server's public key, in Base64 representation" type="string" variable="$dh_server_public">
          <type by_reference="false">string</type>
        </tag>
        <tag line="704" name="param" description="the consumer's private key, in Base64 representation" type="string" variable="$dh_consumer_private">
          <type by_reference="false">string</type>
        </tag>
        <tag line="704" name="param" description="modulus, in Base64 representation" type="string" variable="$dh_modulus">
          <type by_reference="false">string</type>
        </tag>
        <tag line="704" name="param" description="the hash function" type="string" variable="$hash_func">
          <type by_reference="false">string</type>
        </tag>
        <tag line="704" name="return" description="the decrypted session MAC key, in Base64 representation" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="715">
        <name>$enc_mac_key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="715">
        <name>$dh_server_public</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="715">
        <name>$dh_consumer_private</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="715">
        <name>$dh_modulus</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="715">
        <name>$hash_func</name>
        <default><![CDATA['_openid_sha1']]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="741" package="simpleid">
      <name>openid_dh_shared_secret</name>
      <full_name>\openid_dh_shared_secret</full_name>
      <docblock line="725">
        <description><![CDATA[Calculates the shared secret for Diffie-Hellman key exchange.]]></description>
        <long-description><![CDATA[<p>This is the second step in the Diffle-Hellman key exchange process.  The other
party (in OpenID 1.0 terms, the consumer) has already generated the public
key ($dh_consumer_public) and sent it to this party (the server).  The Diffie-Hellman
modulus ($dh_modulus) and generator ($dh_gen) have either been sent or previously agreed.</p>]]></long-description>
        <tag line="725" name="param" description="the other party's public key, in Base64 representation" type="string" variable="$their_public">
          <type by_reference="false">string</type>
        </tag>
        <tag line="725" name="param" description="this party's private key, in Base64 representation" type="string" variable="$my_private">
          <type by_reference="false">string</type>
        </tag>
        <tag line="725" name="param" description="modulus, in Base64 representation" type="string" variable="$dh_modulus">
          <type by_reference="false">string</type>
        </tag>
        <tag line="725" name="return" description="the shared secret (as a bignum)" type="resource">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="725" name="see" description="\global\openid_dh_generate_key_pair()" refers="\global\openid_dh_generate_key_pair()"/>
        <tag line="725" name="link" description="RFC 2631" link="http://www.ietf.org/rfc/rfc2631.txt"/>
      </docblock>
      <argument line="741">
        <name>$their_public</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="741">
        <name>$my_private</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="741">
        <name>$dh_modulus</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="766" package="simpleid">
      <name>openid_dh_generate_key_pair</name>
      <full_name>\openid_dh_generate_key_pair</full_name>
      <docblock line="758">
        <description><![CDATA[Generates a key pair for Diffie-Hellman key exchange.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="758" name="param" description="modulus, in Base64 representation" type="string" variable="$dh_modulus">
          <type by_reference="false">string</type>
        </tag>
        <tag line="758" name="param" description="generator, in Base64 representation" type="string" variable="$dh_gen">
          <type by_reference="false">string</type>
        </tag>
        <tag line="758" name="return" description="an array containing: (a) private - the private key, in Base64 and (b) public - the public key, in Base64" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="766">
        <name>$dh_modulus</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="766">
        <name>$dh_gen</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="798" package="simpleid">
      <name>openid_encrypt_mac_key</name>
      <full_name>\openid_encrypt_mac_key</full_name>
      <docblock line="790">
        <description><![CDATA[Encrypts/decrypts and encodes the MAC key.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="790" name="param" description="the Diffie-Hellman key exchange shared secret as a bignum" type="resource" variable="$ZZ">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="790" name="param" description="a byte stream containing the MAC key" type="string" variable="$mac_key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="790" name="param" description="the hash function" type="string" variable="$hash_func">
          <type by_reference="false">string</type>
        </tag>
        <tag line="790" name="return" description="the encrypted MAC key in Base64 representation" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="798">
        <name>$ZZ</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="798">
        <name>$mac_key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="798">
        <name>$hash_func</name>
        <default><![CDATA['_openid_sha1']]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="817" package="simpleid">
      <name>_openid_xor</name>
      <full_name>\_openid_xor</full_name>
      <docblock line="808">
        <description><![CDATA[Encrypts/decrypts using XOR.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="808" name="param" description="the encryption key as a bignum. This is usually the shared secret (ZZ) calculated from the Diffie-Hellman key exchange" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="808" name="param" description="the plaintext or ciphertext" type="string" variable="$plain_cipher">
          <type by_reference="false">string</type>
        </tag>
        <tag line="808" name="param" description="the hash function" type="string" variable="$hash_func">
          <type by_reference="false">string</type>
        </tag>
        <tag line="808" name="return" description="the ciphertext or plaintext" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="817">
        <name>$key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="817">
        <name>$plain_cipher</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="817">
        <name>$hash_func</name>
        <default><![CDATA['_openid_sha1']]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="836" package="simpleid">
      <name>_openid_dh_rand</name>
      <full_name>\_openid_dh_rand</full_name>
      <docblock line="829">
        <description><![CDATA[Generates a random integer, which will be used to derive a private key
for Diffie-Hellman key exchange.]]></description>
        <long-description><![CDATA[<p>The integer must be less than $stop</p>]]></long-description>
        <tag line="829" name="param" description="a prime number as a bignum" type="resource" variable="$stop">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="829" name="return" description="the random integer as a bignum" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="836">
        <name>$stop</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="880" package="simpleid">
      <name>_openid_base64_to_bignum</name>
      <full_name>\_openid_base64_to_bignum</full_name>
      <docblock line="874">
        <description><![CDATA[Converts an arbitary precision integer, encoded in Base64, to a bignum]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="874" name="param" description="arbitary precision integer, encoded in Base64" type="string" variable="$str">
          <type by_reference="false">string</type>
        </tag>
        <tag line="874" name="return" description="the string representation" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="880">
        <name>$str</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="891" package="simpleid">
      <name>_openid_bignum_to_base64</name>
      <full_name>\_openid_bignum_to_base64</full_name>
      <docblock line="884">
        <description><![CDATA[Converts a string representation of an integer to an arbitary precision
integer, then converts it to Base64 encoding.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="884" name="param" description="the string representation" type="string" variable="$str">
          <type by_reference="false">string</type>
        </tag>
        <tag line="884" name="return" description="the Base64 encoded arbitary precision integer" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="891">
        <name>$str</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="902" package="simpleid">
      <name>_openid_btwoc</name>
      <full_name>\_openid_btwoc</full_name>
      <docblock line="895">
        <description><![CDATA[Encode an integer as big-endian signed two's complement binary string.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="895" name="param" description="the binary integer" type="string" variable="$num">
          <type by_reference="false">string</type>
        </tag>
        <tag line="895" name="return" description="the signed two's complement binary string" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="895" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#btwoc" link="http://openid.net/specs/openid-authentication-2_0.html#btwoc"/>
      </docblock>
      <argument line="902">
        <name>$num</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="918" package="simpleid">
      <name>openid_sign</name>
      <full_name>\openid_sign</full_name>
      <docblock line="907">
        <description><![CDATA[Calculates a signature of an OpenID message]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="907" name="param" description="the data in the message" type="array" variable="$data">
          <type by_reference="false">array</type>
        </tag>
        <tag line="907" name="param" description="a list of keys in the message to be signed (without the 'openid.' prefix)" type="array" variable="$keys">
          <type by_reference="false">array</type>
        </tag>
        <tag line="907" name="param" description="the MAC key used to sign the message, in Base64 representation" type="string" variable="$mac_key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="907" name="param" description="the HMAC function used in the signing process" type="string" variable="$hmac_func">
          <type by_reference="false">string</type>
        </tag>
        <tag line="907" name="param" description="the OpenID version" type="float" variable="$version">
          <type by_reference="false">float</type>
        </tag>
        <tag line="907" name="return" description="the signature encoded in Base64" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="918">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="918">
        <name>$keys</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="918">
        <name>$mac_key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="918">
        <name>$hmac_func</name>
        <default><![CDATA['_openid_hmac_sha1']]></default>
        <type/>
      </argument>
      <argument line="918">
        <name>$version</name>
        <default><![CDATA[OPENID_VERSION_2]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="947" package="simpleid">
      <name>_openid_signature_base_string</name>
      <full_name>\_openid_signature_base_string</full_name>
      <docblock line="935">
        <description><![CDATA[Calculates the base string from which an OpenID signature is generated.]]></description>
        <long-description><![CDATA[<p>OpenID versions 1 and 2 specify that messages are to be encoded using Key-Value
Encoding when generating signatures.  However, future OpenID version may
specify different ways of encoding the message, such as OAuth.</p>]]></long-description>
        <tag line="935" name="param" description="the data to sign" type="array" variable="$data">
          <type by_reference="false">array</type>
        </tag>
        <tag line="935" name="param" description="the OpenID version" type="float" variable="$version">
          <type by_reference="false">float</type>
        </tag>
        <tag line="935" name="return" description="the signature base string" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="935" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#anchor11" link="http://openid.net/specs/openid-authentication-2_0.html#anchor11"/>
      </docblock>
      <argument line="947">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="947">
        <name>$version</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="967" package="simpleid">
      <name>_openid_sha1</name>
      <full_name>\_openid_sha1</full_name>
      <docblock line="961">
        <description><![CDATA[Obtains the SHA1 hash of a string in binary representation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="961" name="param" description="the text to be hashed" type="string" variable="$text">
          <type by_reference="false">string</type>
        </tag>
        <tag line="961" name="return" description="the hash in binary representation" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="967">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="978" package="simpleid">
      <name>_openid_hmac_sha1</name>
      <full_name>\_openid_hmac_sha1</full_name>
      <docblock line="971">
        <description><![CDATA[Obtains the keyed hash value using the HMAC method and the SHA1 algorithm]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="971" name="param" description="the key in binary representation" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="971" name="param" description="the text to be hashed" type="string" variable="$text">
          <type by_reference="false">string</type>
        </tag>
        <tag line="971" name="return" description="the hash in binary representation" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="978">
        <name>$key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="978">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="1012" package="simpleid">
      <name>_openid_sha256</name>
      <full_name>\_openid_sha256</full_name>
      <docblock line="1006">
        <description><![CDATA[Obtains the SHA256 hash of a string in binary representation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="1006" name="param" description="the text to be hashed" type="string" variable="$text">
          <type by_reference="false">string</type>
        </tag>
        <tag line="1006" name="return" description="$hash the hash in binary representation" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="1012">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="1023" package="simpleid">
      <name>_openid_hmac_sha256</name>
      <full_name>\_openid_hmac_sha256</full_name>
      <docblock line="1016">
        <description><![CDATA[Obtains the keyed hash value using the HMAC method and the SHA256 algorithm]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="1016" name="param" description="the key in binary representation" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="1016" name="param" description="the text to be hashed" type="string" variable="$text">
          <type by_reference="false">string</type>
        </tag>
        <tag line="1016" name="return" description="the hash in binary representation" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="1023">
        <name>$key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="1023">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="1046" package="simpleid">
      <name>rfc3986_urlencode</name>
      <full_name>\rfc3986_urlencode</full_name>
      <docblock line="1032">
        <description><![CDATA[Encodes a URL using RFC 3986.]]></description>
        <long-description><![CDATA[<p>PHP's rfc3986_urlencode function encodes a URL using RFC 1738 for PHP versions
prior to 5.3.  RFC 1738 has been
updated by RFC 3986, which change the list of characters which needs to be
encoded.</p>

<p>Strictly correct encoding is required for various purposes, such as OAuth
signature base strings.</p>]]></long-description>
        <tag line="1032" name="param" description="the URL to encode" type="string" variable="$s">
          <type by_reference="false">string</type>
        </tag>
        <tag line="1032" name="return" description="the encoded URL" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="1046">
        <name>$s</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="www/locale.inc.php" hash="300587e8e1a11bc73d74c323c0312db8" package="simpleid">
    <docblock line="23">
      <description><![CDATA[Localisation support.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="23" name="package" description="simpleid"/>
      <tag line="23" name="since" description="0.9"/>
      <tag line="23" name="filesource" description=""/>
    </docblock>
    <include line="31" type="Include Once" package="simpleid">
      <name>lib/gettext/gettext.inc</name>
    </include>
    <function namespace="global" line="38" package="simpleid">
      <name>locale_init</name>
      <full_name>\locale_init</full_name>
      <docblock line="33">
        <description><![CDATA[Initialises the localisation system.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="33" name="param" description="the locale to use" type="string" variable="$locale">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="38">
        <name>$locale</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="59" package="simpleid">
      <name>t</name>
      <full_name>\t</full_name>
      <docblock line="49">
        <description><![CDATA[Translates a string.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="49" name="param" description="the string to translate" type="string" variable="$string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="49" name="param" description="an array of replacements variables to be made after a translation. Prefix the variable with a @ to make the replacement HTML safe, a % to make the replacement HTML safe and surround with &amp;lt;strong&amp;gt; tags, and ! to replace as is" type="array" variable="$variables">
          <type by_reference="false">array</type>
        </tag>
        <tag line="49" name="return" description="the translated string" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="59">
        <name>$string</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="59">
        <name>$variables</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="www/extensions/sreg/sreg.extension.php" hash="350e44de442f92e7682320aeed8eb8e5" package="simpleid\extensions">
    <docblock line="30">
      <description><![CDATA[Implements the Simple Registration extension.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="30" name="package" description="simpleid"/>
      <tag line="30" name="subpackage" description="extensions"/>
      <tag line="30" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="40" package="simpleid\extensions">
      <name>OPENID_NS_SREG</name>
      <full_name>\OPENID_NS_SREG</full_name>
      <value><![CDATA['http://openid.net/extensions/sreg/1.1']]></value>
      <docblock line="39">
        <description><![CDATA[Namespace for the Simple Registration extension]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="45" package="simpleid\extensions">
      <name>sreg_response</name>
      <full_name>\sreg_response</full_name>
      <docblock line="42">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="42" name="see" description="\global\hook_response()" refers="\global\hook_response()"/>
      </docblock>
      <argument line="45">
        <name>$assertion</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="45">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="78" package="simpleid\extensions">
      <name>sreg_signed_fields</name>
      <full_name>\sreg_signed_fields</full_name>
      <docblock line="73">
        <description><![CDATA[Returns an array of fields that need signing.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="73" name="see" description="\global\hook_signed_fields()" refers="\global\hook_signed_fields()"/>
      </docblock>
      <argument line="78">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="97" package="simpleid\extensions">
      <name>sreg_consent_form</name>
      <full_name>\sreg_consent_form</full_name>
      <docblock line="94">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="94" name="see" description="\global\hook_consent_form()" refers="\global\hook_consent_form()"/>
      </docblock>
      <argument line="97">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="97">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="97">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="144" package="simpleid\extensions">
      <name>sreg_consent</name>
      <full_name>\sreg_consent</full_name>
      <docblock line="141">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="141" name="see" description="\global\hook_consent()" refers="\global\hook_consent()"/>
      </docblock>
      <argument line="144">
        <name>$form_request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="144">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="144">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="170" package="simpleid\extensions">
      <name>sreg_page_profile</name>
      <full_name>\sreg_page_profile</full_name>
      <docblock line="167">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="167" name="see" description="\global\hook_page_profile()" refers="\global\hook_page_profile()"/>
      </docblock>
    </function>
    <function namespace="global" line="208" package="simpleid\extensions">
      <name>_sreg_get_value</name>
      <full_name>\_sreg_get_value</full_name>
      <docblock line="198">
        <description><![CDATA[Looks up the value of a specified Simple Registration Extension field.]]></description>
        <long-description><![CDATA[<p>This function looks up the sreg section of the user's identity file.  If the
specified field cannot be found, it looks up the corresponding field in the
OpenID Connect user information (user_info section).</p>]]></long-description>
        <tag line="198" name="param" description="the field to look up" type="string" variable="$field">
          <type by_reference="false">string</type>
        </tag>
        <tag line="198" name="return" description="the value or NULL if not found" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="208">
        <name>$field</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="42" code="50011">No short description for function \sreg_response()</error>
      <error line="42" code="50015">Argument $assertion is missing from the Docblock of \sreg_response()</error>
      <error line="42" code="50015">Argument $request is missing from the Docblock of \sreg_response()</error>
      <error line="73" code="50015">Argument $response is missing from the Docblock of \sreg_signed_fields()</error>
      <error line="94" code="50011">No short description for function \sreg_consent_form()</error>
      <error line="94" code="50015">Argument $request is missing from the Docblock of \sreg_consent_form()</error>
      <error line="94" code="50015">Argument $response is missing from the Docblock of \sreg_consent_form()</error>
      <error line="94" code="50015">Argument $rp is missing from the Docblock of \sreg_consent_form()</error>
      <error line="141" code="50011">No short description for function \sreg_consent()</error>
      <error line="141" code="50015">Argument $form_request is missing from the Docblock of \sreg_consent()</error>
      <error line="141" code="50015">Argument $response is missing from the Docblock of \sreg_consent()</error>
      <error line="141" code="50015">Argument $rp is missing from the Docblock of \sreg_consent()</error>
      <error line="167" code="50011">No short description for function \sreg_page_profile()</error>
    </parse_markers>
  </file>
  <file path="www/extensions/pape/pape.extension.php" hash="39740f50615a96fe7b11a68d395f21be" package="simpleid\extensions">
    <docblock line="24">
      <description><![CDATA[Implements the Provider Authentication Policy Extension extension.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="subpackage" description="extensions"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="34" package="simpleid\extensions">
      <name>OPENID_NS_PAPE</name>
      <full_name>\OPENID_NS_PAPE</full_name>
      <value><![CDATA['http://specs.openid.net/extensions/pape/1.0']]></value>
      <docblock line="33">
        <description><![CDATA[Namespace for the PAPE extension]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="37" package="simpleid\extensions">
      <name>PAPE_POLICY_NONE</name>
      <full_name>\PAPE_POLICY_NONE</full_name>
      <value><![CDATA['http://schemas.openid.net/pape/policies/2007/06/none']]></value>
      <docblock line="36">
        <description><![CDATA[Namespaces for PAPE policies]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="38" package="simpleid\extensions">
      <name>PAPE_POLICY_PPID</name>
      <full_name>\PAPE_POLICY_PPID</full_name>
      <value><![CDATA['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier']]></value>
    </constant>
    <constant namespace="global" line="41" package="simpleid\extensions">
      <name>PAPE_LEVEL_NIST800_63</name>
      <full_name>\PAPE_LEVEL_NIST800_63</full_name>
      <value><![CDATA['http://csrc.nist.gov/publications/nistpubs/800-63/SP800-63V1_0_2.pdf']]></value>
      <docblock line="40">
        <description><![CDATA[Namespaces for PAPE levels]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="49" package="simpleid\extensions">
      <name>pape_xrds_types</name>
      <full_name>\pape_xrds_types</full_name>
      <docblock line="43">
        <description><![CDATA[Returns the support for PAPE in SimpleID XRDS document]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="43" name="return" description="" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="43" name="see" description="\global\hook_xrds_types()" refers="\global\hook_xrds_types()"/>
      </docblock>
    </function>
    <function namespace="global" line="60" package="simpleid\extensions">
      <name>pape_checkid_identity</name>
      <full_name>\pape_checkid_identity</full_name>
      <docblock line="57">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="57" name="see" description="\global\hook_checkid_identity()" refers="\global\hook_checkid_identity()"/>
      </docblock>
      <argument line="60">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="60">
        <name>$identity</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="60">
        <name>$immediate</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="92" package="simpleid\extensions">
      <name>pape_response</name>
      <full_name>\pape_response</full_name>
      <docblock line="89">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="89" name="see" description="\global\hook_response()" refers="\global\hook_response()"/>
      </docblock>
      <argument line="92">
        <name>$assertion</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="92">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="149" package="simpleid\extensions">
      <name>pape_signed_fields</name>
      <full_name>\pape_signed_fields</full_name>
      <docblock line="144">
        <description><![CDATA[Returns an array of fields that need signing.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="144" name="see" description="\global\hook_signed_fields()" refers="\global\hook_signed_fields()"/>
      </docblock>
      <argument line="149">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="168" package="simpleid\extensions">
      <name>_pape_identifier_select</name>
      <full_name>\_pape_identifier_select</full_name>
      <docblock line="162">
        <description><![CDATA[Sets and returns whether the current OpenID request is requesting an identity.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="162" name="param" description="" type="bool" variable="$identifier_select">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="162" name="return" description="whether the current OpenID request is requesting an identity" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="168">
        <name>$identifier_select</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="184" package="simpleid\extensions">
      <name>_pape_ppid</name>
      <full_name>\_pape_ppid</full_name>
      <docblock line="176">
        <description><![CDATA[Generates a private personal identifier (PPID).]]></description>
        <long-description><![CDATA[<p>The PPID is an opaque identifier
for a particular user-RP pair</p>]]></long-description>
        <tag line="176" name="param" description="the identity of the user" type="string" variable="$identity">
          <type by_reference="false">string</type>
        </tag>
        <tag line="176" name="param" description="the URL of the relying party" type="string" variable="$realm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="176" name="return" description="the PPID" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="184">
        <name>$identity</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="184">
        <name>$realm</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="57" code="50011">No short description for function \pape_checkid_identity()</error>
      <error line="57" code="50015">Argument $request is missing from the Docblock of \pape_checkid_identity()</error>
      <error line="57" code="50015">Argument $identity is missing from the Docblock of \pape_checkid_identity()</error>
      <error line="57" code="50015">Argument $immediate is missing from the Docblock of \pape_checkid_identity()</error>
      <error line="89" code="50011">No short description for function \pape_response()</error>
      <error line="89" code="50015">Argument $assertion is missing from the Docblock of \pape_response()</error>
      <error line="89" code="50015">Argument $request is missing from the Docblock of \pape_response()</error>
      <error line="144" code="50015">Argument $response is missing from the Docblock of \pape_signed_fields()</error>
    </parse_markers>
  </file>
  <file path="www/extensions/certauth/certauth.extension.php" hash="e65bc5fb05b63c3c03087f13f6d33f82" package="simpleid\extensions">
    <docblock line="24">
      <description><![CDATA[Authentication using a SSL client certificate.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="subpackage" description="extensions"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <function namespace="global" line="39" package="simpleid\extensions">
      <name>certauth_user_auto_login</name>
      <full_name>\certauth_user_auto_login</full_name>
      <docblock line="33">
        <description><![CDATA[Attempt to login using a SSL client certificate.]]></description>
        <long-description><![CDATA[<p>Note that the web server must be set up to request a SSL client certificate
and pass the certificate's details to PHP.</p>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="69" package="simpleid\extensions">
      <name>_certauth_has_client_cert</name>
      <full_name>\_certauth_has_client_cert</full_name>
      <docblock line="55">
        <description><![CDATA[Determines whether the user agent supplied valid a certificate identifying the
user.]]></description>
        <long-description><![CDATA[<p>A valid certificate is supplied if all of the following occurs:</p>

<ul>
<li>the connection is done using HTTPS (i.e. {@link is_https()} is true)</li>
<li>the web server has been set up to request a certificate from the user agent</li>
<li>the web server has been set up to pass the certificate details to PHP</li>
<li>the certificate has not been revoked</li>
<li>the certificate contains a serial number and a valid issuer</li>
</ul>]]></long-description>
        <tag line="55" name="return" description="if the user agent has supplied a valid SSL certificate" type="true">
          <type by_reference="false">true</type>
        </tag>
      </docblock>
    </function>
  </file>
  <file path="www/extensions/ui/ui.extension.php" hash="4bdbf89334f549071bf827beac12a69d" package="simpleid\extensions">
    <docblock line="24">
      <description><![CDATA[Implements the popup and icon modes from the User Interface extension]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="subpackage" description="extensions"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="33" package="simpleid\extensions">
      <name>OPENID_NS_UI</name>
      <full_name>\OPENID_NS_UI</full_name>
      <value><![CDATA['http://specs.openid.net/extensions/ui/1.0']]></value>
      <docblock line="32">
        <description><![CDATA[Namespace for the User Interface extension]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="41" package="simpleid\extensions">
      <name>ui_xrds_types</name>
      <full_name>\ui_xrds_types</full_name>
      <docblock line="35">
        <description><![CDATA[Returns the popup mode in SimpleID XRDS document]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="35" name="return" description="" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="35" name="see" description="\global\hook_xrds_types()" refers="\global\hook_xrds_types()"/>
      </docblock>
    </function>
    <function namespace="global" line="54" package="simpleid\extensions">
      <name>ui_response</name>
      <full_name>\ui_response</full_name>
      <docblock line="48">
        <description><![CDATA[Detects the openid.ui.x-has-session parameter and processes it accordingly.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="48" name="return" description="" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="48" name="see" description="\global\hook_response()" refers="\global\hook_response()"/>
      </docblock>
      <argument line="54">
        <name>$assertion</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="54">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="86" package="simpleid\extensions">
      <name>ui_signed_fields</name>
      <full_name>\ui_signed_fields</full_name>
      <docblock line="81">
        <description><![CDATA[Returns an array of fields that need signing.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="81" name="see" description="\global\hook_signed_fields()" refers="\global\hook_signed_fields()"/>
      </docblock>
      <argument line="86">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="110" package="simpleid\extensions">
      <name>ui_user_login_form</name>
      <full_name>\ui_user_login_form</full_name>
      <docblock line="102">
        <description><![CDATA[Detects the presence of the UI extension and modifies the login form
accordingly.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="102" name="param" description="" type="string" variable="$destination">
          <type by_reference="false">string</type>
        </tag>
        <tag line="102" name="param" description="" type="string" variable="$state">
          <type by_reference="false">string</type>
        </tag>
        <tag line="102" name="see" description="\global\hook_user_login_form()" refers="\global\hook_user_login_form()"/>
      </docblock>
      <argument line="110">
        <name>$destination</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="110">
        <name>$state</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="136" package="simpleid\extensions">
      <name>ui_consent_form</name>
      <full_name>\ui_consent_form</full_name>
      <docblock line="126">
        <description><![CDATA[Detects the presence of the UI extension and modifies the relying party
verification form accordingly.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="126" name="param" description="" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="126" name="param" description="" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="126" name="param" description="" type="array" variable="$rp">
          <type by_reference="false">array</type>
        </tag>
        <tag line="126" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="126" name="see" description="\global\hook_consent_form()" refers="\global\hook_consent_form()"/>
      </docblock>
      <argument line="136">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="136">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="136">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="161" package="simpleid\extensions">
      <name>ui_indirect_response</name>
      <full_name>\ui_indirect_response</full_name>
      <docblock line="157">
        <description><![CDATA[Specifies that the OpenID response should be sent via the fragment]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <argument line="161">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="161">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="178" package="simpleid\extensions">
      <name>ui_routes</name>
      <full_name>\ui_routes</full_name>
      <docblock line="175">
        <description><![CDATA[Adds an extra route to the SimpleWeb framework.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="185" package="simpleid\extensions">
      <name>ui_icon</name>
      <full_name>\ui_icon</full_name>
      <docblock line="182">
        <description><![CDATA[Returns an icon.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="210" package="simpleid\extensions">
      <name>_ui_insert_css_js</name>
      <full_name>\_ui_insert_css_js</full_name>
      <docblock line="206">
        <description><![CDATA[Inserts the necessary CSS and JavaScript code to implement the popup mode
from the User Interface extension.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="227" package="simpleid\extensions">
      <name>_ui_get_icon</name>
      <full_name>\_ui_get_icon</full_name>
      <docblock line="220">
        <description><![CDATA[Attempts to obtain an icon from a RP]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="220" name="param" description="the openid.realm parameter" type="string" variable="$realm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="220" name="return" description="the response from {@link http_make_request()} with the discovered URL of the RP's icon" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="227">
        <name>$realm</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="257" package="simpleid\extensions">
      <name>_ui_icon_token</name>
      <full_name>\_ui_icon_token</full_name>
      <docblock line="249">
        <description><![CDATA[Returns a token to be used when requesting the icon.]]></description>
        <long-description><![CDATA[<p>The token is used to prevent flooding SimpleID with external requests.</p>]]></long-description>
        <tag line="249" name="param" description="the openid.realm parameter" type="string" variable="$realm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="249" name="return" description="the token" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="257">
        <name>$realm</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="48" code="50015">Argument $assertion is missing from the Docblock of \ui_response()</error>
      <error line="48" code="50015">Argument $request is missing from the Docblock of \ui_response()</error>
      <error line="81" code="50015">Argument $response is missing from the Docblock of \ui_signed_fields()</error>
      <error line="157" code="50015">Argument $url is missing from the Docblock of \ui_indirect_response()</error>
      <error line="157" code="50015">Argument $response is missing from the Docblock of \ui_indirect_response()</error>
    </parse_markers>
  </file>
  <file path="www/extensions/ax/ax.extension.php" hash="a8ebd3dae7b24a014205b4789f040ff2" package="simpleid\extensions">
    <docblock line="24">
      <description><![CDATA[Implements the Attribute Exchange extension.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="subpackage" description="extensions"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="34" package="simpleid\extensions">
      <name>OPENID_NS_AX</name>
      <full_name>\OPENID_NS_AX</full_name>
      <value><![CDATA['http://openid.net/srv/ax/1.0']]></value>
      <docblock line="33">
        <description><![CDATA[Namespace for the AX extension]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="71" package="simpleid\extensions">
      <name>ax_xrds_types</name>
      <full_name>\ax_xrds_types</full_name>
      <docblock line="65">
        <description><![CDATA[Returns the support for AX in SimpleID XRDS document]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="65" name="return" description="" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="65" name="see" description="\global\hook_xrds_types()" refers="\global\hook_xrds_types()"/>
      </docblock>
    </function>
    <function namespace="global" line="78" package="simpleid\extensions">
      <name>ax_response</name>
      <full_name>\ax_response</full_name>
      <docblock line="75">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="75" name="see" description="\global\hook_response()" refers="\global\hook_response()"/>
      </docblock>
      <argument line="78">
        <name>$assertion</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="78">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="134" package="simpleid\extensions">
      <name>ax_signed_fields</name>
      <full_name>\ax_signed_fields</full_name>
      <docblock line="129">
        <description><![CDATA[Returns an array of fields that need signing.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="129" name="see" description="\global\hook_signed_fields()" refers="\global\hook_signed_fields()"/>
      </docblock>
      <argument line="134">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="153" package="simpleid\extensions">
      <name>ax_consent_form</name>
      <full_name>\ax_consent_form</full_name>
      <docblock line="150">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="150" name="see" description="\global\hook_consent_form()" refers="\global\hook_consent_form()"/>
      </docblock>
      <argument line="153">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="153">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="153">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="212" package="simpleid\extensions">
      <name>ax_consent</name>
      <full_name>\ax_consent</full_name>
      <docblock line="209">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="209" name="see" description="\global\hook_consent()" refers="\global\hook_consent()"/>
      </docblock>
      <argument line="212">
        <name>$form_request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="212">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="212">
        <name>$rp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="253" package="simpleid\extensions">
      <name>ax_page_profile</name>
      <full_name>\ax_page_profile</full_name>
      <docblock line="250">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="250" name="see" description="\global\hook_page_profile()" refers="\global\hook_page_profile()"/>
      </docblock>
    </function>
    <function namespace="global" line="290" package="simpleid\extensions">
      <name>_ax_get_value</name>
      <full_name>\_ax_get_value</full_name>
      <docblock line="279">
        <description><![CDATA[Looks up the value of a specified Attribute Exchange Extension type URI.]]></description>
        <long-description><![CDATA[<p>This function looks up the ax section of the user's identity file.  If the
specified type cannot be found, it looks up the corresponding field in the
OpenID Connect user information (user_info section) and the Simple Registration
Extension (sreg section).</p>]]></long-description>
        <tag line="279" name="param" description="the type URI to look up" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="279" name="return" description="the value or NULL if not found" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="290">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <error line="75" code="50011">No short description for function \ax_response()</error>
      <error line="75" code="50015">Argument $assertion is missing from the Docblock of \ax_response()</error>
      <error line="75" code="50015">Argument $request is missing from the Docblock of \ax_response()</error>
      <error line="129" code="50015">Argument $response is missing from the Docblock of \ax_signed_fields()</error>
      <error line="150" code="50011">No short description for function \ax_consent_form()</error>
      <error line="150" code="50015">Argument $request is missing from the Docblock of \ax_consent_form()</error>
      <error line="150" code="50015">Argument $response is missing from the Docblock of \ax_consent_form()</error>
      <error line="150" code="50015">Argument $rp is missing from the Docblock of \ax_consent_form()</error>
      <error line="209" code="50011">No short description for function \ax_consent()</error>
      <error line="209" code="50015">Argument $form_request is missing from the Docblock of \ax_consent()</error>
      <error line="209" code="50015">Argument $response is missing from the Docblock of \ax_consent()</error>
      <error line="209" code="50015">Argument $rp is missing from the Docblock of \ax_consent()</error>
      <error line="250" code="50011">No short description for function \ax_page_profile()</error>
    </parse_markers>
  </file>
  <file path="www/index.php" hash="6ae93c0d08e40b7c228ab3f9c90368f0" package="simpleid">
    <docblock line="30">
      <description><![CDATA[Main SimpleID file.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="30" name="package" description="simpleid"/>
      <tag line="30" name="filesource" description=""/>
    </docblock>
    <include line="37" type="Include Once" package="simpleid">
      <name>version.inc.php</name>
    </include>
    <include line="38" type="Include Once" package="simpleid">
      <name>locale.inc.php</name>
    </include>
    <include line="45" type="Include Once" package="simpleid">
      <name>config.php</name>
    </include>
    <include line="46" type="Include Once" package="simpleid">
      <name>config.default.php</name>
    </include>
    <include line="47" type="Include Once" package="simpleid">
      <name>log.inc.php</name>
    </include>
    <include line="48" type="Include Once" package="simpleid">
      <name>common.inc.php</name>
    </include>
    <include line="49" type="Include Once" package="simpleid">
      <name>simpleweb.inc.php</name>
    </include>
    <include line="50" type="Include Once" package="simpleid">
      <name>openid.inc.php</name>
    </include>
    <include line="51" type="Include Once" package="simpleid">
      <name>discovery.inc.php</name>
    </include>
    <include line="52" type="Include Once" package="simpleid">
      <name>user.inc.php</name>
    </include>
    <include line="53" type="Include Once" package="simpleid">
      <name>cache.inc.php</name>
    </include>
    <include line="54" type="Include Once" package="simpleid">
      <name/>
    </include>
    <include line="55" type="Include Once" package="simpleid">
      <name>page.inc.php</name>
    </include>
    <include line="56" type="Include Once" package="simpleid">
      <name>lib/xtemplate.class.php</name>
    </include>
    <constant namespace="global" line="58" package="simpleid">
      <name>CACHE_DIR</name>
      <full_name>\CACHE_DIR</full_name>
      <value><![CDATA[SIMPLEID_CACHE_DIR]]></value>
    </constant>
    <constant namespace="global" line="62" package="simpleid">
      <name>CHECKID_OK</name>
      <full_name>\CHECKID_OK</full_name>
      <value><![CDATA[127]]></value>
      <docblock line="60">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="63" package="simpleid">
      <name>CHECKID_RETURN_TO_SUSPECT</name>
      <full_name>\CHECKID_RETURN_TO_SUSPECT</full_name>
      <value><![CDATA[3]]></value>
    </constant>
    <constant namespace="global" line="64" package="simpleid">
      <name>CHECKID_APPROVAL_REQUIRED</name>
      <full_name>\CHECKID_APPROVAL_REQUIRED</full_name>
      <value><![CDATA[2]]></value>
    </constant>
    <constant namespace="global" line="65" package="simpleid">
      <name>CHECKID_LOGIN_REQUIRED</name>
      <full_name>\CHECKID_LOGIN_REQUIRED</full_name>
      <value><![CDATA[-1]]></value>
    </constant>
    <constant namespace="global" line="66" package="simpleid">
      <name>CHECKID_IDENTITIES_NOT_MATCHING</name>
      <full_name>\CHECKID_IDENTITIES_NOT_MATCHING</full_name>
      <value><![CDATA[-2]]></value>
    </constant>
    <constant namespace="global" line="67" package="simpleid">
      <name>CHECKID_IDENTITY_NOT_EXIST</name>
      <full_name>\CHECKID_IDENTITY_NOT_EXIST</full_name>
      <value><![CDATA[-3]]></value>
    </constant>
    <constant namespace="global" line="68" package="simpleid">
      <name>CHECKID_PROTOCOL_ERROR</name>
      <full_name>\CHECKID_PROTOCOL_ERROR</full_name>
      <value><![CDATA[-127]]></value>
    </constant>
    <constant namespace="global" line="70" package="simpleid">
      <name>ASSOCIATION_PRIVATE</name>
      <full_name>\ASSOCIATION_PRIVATE</full_name>
      <value><![CDATA[2]]></value>
    </constant>
    <constant namespace="global" line="71" package="simpleid">
      <name>ASSOCIATION_SHARED</name>
      <full_name>\ASSOCIATION_SHARED</full_name>
      <value><![CDATA[1]]></value>
    </constant>
    <function namespace="global" line="105" package="simpleid">
      <name>simpleid_start</name>
      <full_name>\simpleid_start</full_name>
      <docblock line="100">
        <description><![CDATA[Entry point for SimpleID.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="100" name="see" description="\global\user_init()" refers="\global\user_init()"/>
      </docblock>
    </function>
    <function namespace="global" line="189" package="simpleid">
      <name>simpleid_route</name>
      <full_name>\simpleid_route</full_name>
      <docblock line="182">
        <description><![CDATA[Dispatches to the correct SimpleID function based on the request path.]]></description>
        <long-description><![CDATA[<p>The
request path usually comes from the q parameter in the query string (which may
be inserted by mod_rewrite), but can come from other functions as well.</p>]]></long-description>
        <tag line="182" name="param" description="the request path" type="string" variable="$q">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="189">
        <name>$q</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="224" package="simpleid">
      <name>simpleid_index</name>
      <full_name>\simpleid_index</full_name>
      <docblock line="210">
        <description><![CDATA[The default route, called when the q parameter is missing or is invalid.]]></description>
        <long-description><![CDATA[<p>This function performs the following:</p>

<ul>
<li>If openid.mode is present, then the request is an OpenID request.  This
is passed to {@link simpleid_process_openid()}</li>
<li>If the Accept HTTP header contains the expression application/xrds+xml, then
the request is a YADIS discovery request for SimpleID as an OpenID provider.  Thi
is passed to {@link simpleid_xrds()}</li>
<li>Otherwise, the dashboard or the login page is displayed to the user as
appropriate</li>
</ul>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="258" package="simpleid">
      <name>simpleid_process_openid</name>
      <full_name>\simpleid_process_openid</full_name>
      <docblock line="245">
        <description><![CDATA[Process an OpenID request.]]></description>
        <long-description><![CDATA[<p>This function determines the version of the OpenID specification that is
relevant to this request, checks openid.mode and passes the
request on to the function required to process the request.</p>

<p>The OpenID request expressed as an array contain key-value pairs corresponding
to the HTTP request.  This is usually contained in the</p>

<pre><code>$_REQUEST</code></pre>

<p>variable.</p>]]></long-description>
        <tag line="245" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="258">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="301" package="simpleid">
      <name>simpleid_associate</name>
      <full_name>\simpleid_associate</full_name>
      <docblock line="288">
        <description><![CDATA[Processes an association request from a relying party.]]></description>
        <long-description><![CDATA[<p>An association request has an openid.mode value of
associate.  This function checks whether the association request
is valid, and if so, creates an association and sends the response to
the relying party.</p>]]></long-description>
        <tag line="288" name="see" description="\global\_simpleid_create_association()" refers="\global\_simpleid_create_association()"/>
        <tag line="288" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="288" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#associations" link="http://openid.net/specs/openid-authentication-1_1.html#mode_associate,"/>
      </docblock>
      <argument line="301">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="379" package="simpleid">
      <name>_simpleid_create_association</name>
      <full_name>\_simpleid_create_association</full_name>
      <docblock line="362">
        <description><![CDATA[Creates an association.]]></description>
        <long-description><![CDATA[<p>This function calls {@link openid_dh_server_assoc()} where required, to
generate the cryptographic values required for an association response.</p>]]></long-description>
        <tag line="362" name="param" description="either ASSOCIATION_SHARED or ASSOCIATION_PRIVATE" type="int" variable="$mode">
          <type by_reference="false">int</type>
        </tag>
        <tag line="362" name="param" description="a valid OpenID association type" type="string" variable="$assoc_type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="362" name="param" description="a valid OpenID session type" type="string" variable="$session_type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="362" name="param" description="for Diffie-Hellman key exchange, the modulus encoded in Base64" type="string" variable="$dh_modulus">
          <type by_reference="false">string</type>
        </tag>
        <tag line="362" name="param" description="for Diffie-Hellman key exchange, g encoded in Base64" type="string" variable="$dh_gen">
          <type by_reference="false">string</type>
        </tag>
        <tag line="362" name="param" description="for Diffie-Hellman key exchange, the public key of the relying party encoded in Base64" type="string" variable="$dh_consumer_public">
          <type by_reference="false">string</type>
        </tag>
        <tag line="362" name="return" description="if $mode is ASSOCIATION_SHARED, an OpenID response to the association request, if $mode is ASSOCIATION_PRIVATE, the association data for storage." type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="362" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#anchor20" link="http://openid.net/specs/openid-authentication-1_1.html#anchor14,"/>
      </docblock>
      <argument line="379">
        <name>$mode</name>
        <default><![CDATA[ASSOCIATION_SHARED]]></default>
        <type/>
      </argument>
      <argument line="379">
        <name>$assoc_type</name>
        <default><![CDATA['HMAC-SHA1']]></default>
        <type/>
      </argument>
      <argument line="379">
        <name>$session_type</name>
        <default><![CDATA['no-encryption']]></default>
        <type/>
      </argument>
      <argument line="379">
        <name>$dh_modulus</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="379">
        <name>$dh_gen</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="379">
        <name>$dh_consumer_public</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="452" package="simpleid">
      <name>simpleid_checkid</name>
      <full_name>\simpleid_checkid</full_name>
      <docblock line="432">
        <description><![CDATA[Processes an authentication request from a relying party.]]></description>
        <long-description><![CDATA[<p>An authentication request has an openid.mode value of
checkid_setup or checkid_immediate.</p>

<p>If the authentication request is a standard OpenID request about an identity
(i.e. contains the key openid.identity), this function calls
{@link simpleid_checkid_identity()} to see whether the user logged on into SimpleID
matches the identity supplied in the OpenID request.</p>

<p>If the authentication request is not about an identity, this function calls
the {@link hook_checkid() checkid hook} of the loaded extensions.</p>

<p>Depending on the OpenID version, this function will supply an appropriate
assertion.</p>]]></long-description>
        <tag line="432" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="452">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="583" package="simpleid">
      <name>simpleid_checkid_identity</name>
      <full_name>\simpleid_checkid_identity</full_name>
      <docblock line="571">
        <description><![CDATA[Processes a standard OpenID authentication request about an identity.]]></description>
        <long-description><![CDATA[<p>Checks whether the current user logged into SimpleID matches the identity
supplied in an OpenID request.</p>]]></long-description>
        <tag line="571" name="param" description="&amp;$request the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="571" name="param" description="whether checkid_immediate was used" type="bool" variable="$immediate">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="571" name="return" description="one of CHECKID_OK, CHECKID_APPROVAL_REQUIRED, CHECKID_RETURN_TO_SUSPECT, CHECKID_IDENTITY_NOT_EXIST, CHECKID_IDENTITIES_NOT_MATCHING, CHECKID_LOGIN_REQUIRED or CHECKID_PROTOCOL_ERROR" type="int">
          <type by_reference="false">int</type>
        </tag>
        <tag line="571" name="global" description="array the current logged in user"/>
      </docblock>
      <argument line="583">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="583">
        <name>$immediate</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="688" package="simpleid">
      <name>simpleid_get_rp_info</name>
      <full_name>\simpleid_get_rp_info</full_name>
      <docblock line="673">
        <description><![CDATA[Obtains information on a relying party by performing discovery on them.]]></description>
        <long-description><![CDATA[<p>Information
obtained includes the discovery URL, the parsed XRDS document, and any other
information saved by SimpleID extensions</p>

<p>The results are cached for 1 hour.  For performance reasons, stale results may
be obtained by using the $allow_stale parameter</p>]]></long-description>
        <tag line="673" name="param" description="the openid.realm parameter" type="string" variable="$realm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="673" name="param" description="allow stale results to be returned, otherwise discovery will occur" type="bool" variable="$allow_stale">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="673" name="return" description="containing information on a relying party." type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="673" name="link" description="http://openid.net/specs/openid-authentication-2_0.html#rp_discovery" link="http://openid.net/specs/openid-authentication-2_0.html#rp_discovery"/>
        <tag line="673" name="since" description="0.8"/>
      </docblock>
      <argument line="688">
        <name>$realm</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="688">
        <name>$allow_stale</name>
        <default><![CDATA[FALSE]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="718" package="simpleid">
      <name>simpleid_set_rp_info</name>
      <full_name>\simpleid_set_rp_info</full_name>
      <docblock line="710">
        <description><![CDATA[Saves information on a relying party to disk.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="710" name="param" description="the openid.realm parameter" type="string" variable="$realm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="710" name="param" description="containing information on a relying party." type="array" variable="$rp_info">
          <type by_reference="false">array</type>
        </tag>
        <tag line="710" name="since" description="0.8"/>
      </docblock>
      <argument line="718">
        <name>$realm</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="718">
        <name>$rp_info</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="730" package="simpleid">
      <name>simpleid_checkid_ok</name>
      <full_name>\simpleid_checkid_ok</full_name>
      <docblock line="723">
        <description><![CDATA[Returns an OpenID response indicating a positive assertion.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="723" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="723" name="return" description="an OpenID response with a positive assertion" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="723" name="link" description="http://openid.net/specs/openid-authentication-1_1.html#anchor23, http://openid.net/specs/openid-authentication-2_0.html#positive_assertions" link="http://openid.net/specs/openid-authentication-1_1.html#anchor17,"/>
      </docblock>
      <argument line="730">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="762" package="simpleid">
      <name>simpleid_checkid_approval_required</name>
      <full_name>\simpleid_checkid_approval_required</full_name>
      <docblock line="753">
        <description><![CDATA[Returns an OpenID response indicating a negative assertion to a
checkid_immediate request, where an approval of the relying party by the
user is required]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="753" name="param" description="the OpenID request" type="mixed" variable="$request">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="753" name="return" description="an OpenID response with a negative assertion" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="753" name="link" description="http://openid.net/specs/openid-authentication-1_1.html#anchor23, http://openid.net/specs/openid-authentication-2_0.html#negative_assertions" link="http://openid.net/specs/openid-authentication-1_1.html#anchor17,"/>
      </docblock>
      <argument line="762">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="789" package="simpleid">
      <name>simpleid_checkid_login_required</name>
      <full_name>\simpleid_checkid_login_required</full_name>
      <docblock line="781">
        <description><![CDATA[Returns an OpenID response indicating a negative assertion to a
checkid_immediate request, where the user has not logged in.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="781" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="781" name="return" description="an OpenID response with a negative assertion" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="781" name="link" description="http://openid.net/specs/openid-authentication-1_1.html#anchor23, http://openid.net/specs/openid-authentication-2_0.html#negative_assertions" link="http://openid.net/specs/openid-authentication-1_1.html#anchor17,"/>
      </docblock>
      <argument line="789">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="818" package="simpleid">
      <name>simpleid_checkid_error</name>
      <full_name>\simpleid_checkid_error</full_name>
      <docblock line="807">
        <description><![CDATA[Returns an OpenID response indicating a generic negative assertion.]]></description>
        <long-description><![CDATA[<p>The content of the negative version depends on the OpenID version, and whether
the openid.mode of the request was checkid_immediate</p>]]></long-description>
        <tag line="807" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="807" name="param" description="true if openid.mode of the request was checkid_immediate" type="bool" variable="$immediate">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="807" name="return" description="an OpenID response with a negative assertion" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="807" name="link" description="http://openid.net/specs/openid-authentication-1_1.html#anchor23, http://openid.net/specs/openid-authentication-2_0.html#negative_assertions" link="http://openid.net/specs/openid-authentication-1_1.html#anchor17,"/>
      </docblock>
      <argument line="818">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="818">
        <name>$immediate</name>
        <default><![CDATA[false]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="849" package="simpleid">
      <name>simpleid_sign</name>
      <full_name>\simpleid_sign</full_name>
      <docblock line="838">
        <description><![CDATA[Signs an OpenID response, using signature information from an association
handle.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="838" name="param" description="&amp;$response the OpenID response" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="838" name="param" description="the association handle containing key information for the signature. If $assoc_handle is not specified, a private association is created" type="array" variable="$assoc_handle">
          <type by_reference="false">array</type>
        </tag>
        <tag line="838" name="return" description="the signed OpenID response" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="849">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="849">
        <name>$assoc_handle</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="907" package="simpleid">
      <name>simpleid_check_authentication</name>
      <full_name>\simpleid_check_authentication</full_name>
      <docblock line="900">
        <description><![CDATA[Processes a direct verification request.]]></description>
        <long-description><![CDATA[<p>This is used in the OpenID specification
to verify signatures generated using stateless mode.</p>]]></long-description>
        <tag line="900" name="param" description="the OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="900" name="see" description="\global\http://openid.net/specs/openid-authentication-1_1.html#mode_check_authentication," refers="\global\http://openid.net/specs/openid-authentication-1_1.html#mode_check_authentication,"/>
      </docblock>
      <argument line="907">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="942" package="simpleid">
      <name>simpleid_verify_signatures</name>
      <full_name>\simpleid_verify_signatures</full_name>
      <docblock line="935">
        <description><![CDATA[Verifies the signature of a signed OpenID request/response.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="935" name="param" description="the OpenID request/response" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="935" name="return" description="true if the signature is verified" type="bool">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="935" name="since" description="0.8"/>
      </docblock>
      <argument line="942">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="993" package="simpleid">
      <name>simpleid_continue</name>
      <full_name>\simpleid_continue</full_name>
      <docblock line="985">
        <description><![CDATA[Continues an OpenID authentication request.]]></description>
        <long-description><![CDATA[<p>This function decodes an OpenID authentication request specified in the
s request parameter and feeds it to the
{@link simpleid_process_openid} function.  This allows SimpleID to preserve
the state of an OpenID request.</p>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="1016" package="simpleid">
      <name>simpleid_openid_consent_form</name>
      <full_name>\simpleid_openid_consent_form</full_name>
      <docblock line="1001">
        <description><![CDATA[Provides a form for user consent of an OpenID relying party, where the
{@link simpleid_checkid_identity()} function returns a CHECKID_APPROVAL_REQUIRED
or CHECKID_RETURN_TO_SUSPECT.]]></description>
        <long-description><![CDATA[<p>Alternatively, provide a form for the user to rectify the situation where
{@link simpleid_checkid_identity()} function returns a CHECKID_IDENTITIES_NOT_MATCHING
or CHECKID_IDENTITY_NOT_EXIST</p>]]></long-description>
        <tag line="1001" name="param" description="the original OpenID request" type="array" variable="$request">
          <type by_reference="false">array</type>
        </tag>
        <tag line="1001" name="param" description="the proposed OpenID response, subject to user verification" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="1001" name="param" description="either CHECKID_APPROVAL_REQUIRED, CHECKID_RETURN_TO_SUSPECT, CHECKID_IDENTITIES_NOT_MATCHING or CHECKID_IDENTITY_NOT_EXIST" type="int" variable="$reason">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="1016">
        <name>$request</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="1016">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="1016">
        <name>$reason</name>
        <default><![CDATA[CHECKID_APPROVAL_REQUIRED]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="1088" package="simpleid">
      <name>simpleid_openid_consent</name>
      <full_name>\simpleid_openid_consent</full_name>
      <docblock line="1081">
        <description><![CDATA[Processes a user response from the {@link simpleid_openid_consent_form()} function.]]></description>
        <long-description><![CDATA[<p>If the user verifies the relying party, an OpenID response will be sent to
the relying party.  Otherwise, the dashboard will be displayed to the user.</p>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="1163" package="simpleid">
      <name>simpleid_assertion_response</name>
      <full_name>\simpleid_assertion_response</full_name>
      <docblock line="1152">
        <description><![CDATA[Sends an OpenID assertion response.]]></description>
        <long-description><![CDATA[<p>The OpenID specification version 2.0 provides for the sending of assertions
via indirect communication.  However, future versions of the OpenID
specification may provide for sending of assertions via direct communication.</p>]]></long-description>
        <tag line="1152" name="param" description="the signed OpenID assertion response to send" type="array" variable="$response">
          <type by_reference="false">array</type>
        </tag>
        <tag line="1152" name="param" description="the URL to which the OpenID response is sent. If this is an empty string, the response is sent via direct communication" type="string" variable="$indirect_url">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="1163">
        <name>$response</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="1163">
        <name>$indirect_url</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="1182" package="simpleid">
      <name>simpleid_xrds</name>
      <full_name>\simpleid_xrds</full_name>
      <docblock line="1178">
        <description><![CDATA[Displays the XRDS document for this SimpleID installation.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
  </file>
  <file path="www/user.inc.php" hash="ff6c1b58d684096d8cd298eb1605d81d" package="simpleid">
    <docblock line="30">
      <description><![CDATA[User functions.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="30" name="package" description="simpleid"/>
      <tag line="30" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="40" package="simpleid">
      <name>SIMPLEID_LOGIN_NONCE_EXPIRES_IN</name>
      <full_name>\SIMPLEID_LOGIN_NONCE_EXPIRES_IN</full_name>
      <value><![CDATA[3600]]></value>
      <docblock line="37">
        <description><![CDATA[The time the nonce used in the login process will last.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="46" package="simpleid">
      <name>SIMPLEID_USER_AUTOLOGIN_EXPIRES_IN</name>
      <full_name>\SIMPLEID_USER_AUTOLOGIN_EXPIRES_IN</full_name>
      <value><![CDATA[1209600]]></value>
      <docblock line="42">
        <description><![CDATA[The time (in seconds) the auto login cookie will last.]]></description>
        <long-description><![CDATA[<p>This is currently
set as 2 weeks.</p>]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="62" package="simpleid">
      <name>user_init</name>
      <full_name>\user_init</full_name>
      <docblock line="56">
        <description><![CDATA[Initialises the user system.]]></description>
        <long-description><![CDATA[<p>Loads data for the currently logged-in user,
if any.</p>]]></long-description>
        <tag line="56" name="param" description="the SimpleID command, if any" type="string" variable="$q">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="62">
        <name>$q</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="100" package="simpleid">
      <name>user_auto_login</name>
      <full_name>\user_auto_login</full_name>
      <docblock line="92">
        <description><![CDATA[Attempts to automatically login using credentials presented by the user agent.]]></description>
        <long-description><![CDATA[<p>The user agent may present various credentials as part of its request.  These
may include cookies and SSL client certificates.  This function calls the
{@link hook_user_auto_login()} hook of enabled extensions to see if any
of these credentials can be used to automatically login a user.</p>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="123" package="simpleid">
      <name>user_load</name>
      <full_name>\user_load</full_name>
      <docblock line="115">
        <description><![CDATA[Loads user data for a specified user name.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="115" name="param" description="the name of the user to load" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="115" name="return" description="data for the specified user, or NULL if the user name does not exist" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="115" name="see" description="\global\user_load_from_identity()" refers="\global\user_load_from_identity()"/>
      </docblock>
      <argument line="123">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="149" package="simpleid">
      <name>user_load_from_identity</name>
      <full_name>\user_load_from_identity</full_name>
      <docblock line="141">
        <description><![CDATA[Loads user data for a specified OpenID Identity URI.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="141" name="param" description="the Identity URI of the user to load" type="string" variable="$identity">
          <type by_reference="false">string</type>
        </tag>
        <tag line="141" name="return" description="data for the specified user, or NULL if the user name does not exist" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="141" name="see" description="\global\user_load()" refers="\global\user_load()"/>
      </docblock>
      <argument line="149">
        <name>$identity</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="161" package="simpleid">
      <name>user_save</name>
      <full_name>\user_save</full_name>
      <docblock line="156">
        <description><![CDATA[Stores user data for a specified user name.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="156" name="param" description="the user to save" type="array" variable="$user">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="161">
        <name>$user</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="170" package="simpleid">
      <name>user_login</name>
      <full_name>\user_login</full_name>
      <docblock line="166">
        <description><![CDATA[Attempts to log in a user, using the user name and password specified in the
HTTP request.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="320" package="simpleid">
      <name>user_verify_credentials</name>
      <full_name>\user_verify_credentials</full_name>
      <docblock line="293">
        <description><![CDATA[Verifies a set of credentials for a specified user.]]></description>
        <long-description><![CDATA[<p>A set of credentials comprises:</p>

<ul>
<li>A user name</li>
<li>Some kind of verifying information, such as a plaintext password, a hashed
password (e.g. digest) or some other kind of identifying information.</li>
</ul>

<p>The user name is passed to this function using the $uid parameter.  The user
name may or may not exist.  If the user name does not exist, this function
<strong>must</strong> return false.</p>

<p>The credentials are supplied as an array using the $credentials parameter.
Typically this array will be a subset of the $_POST superglobal passed to the
{@link user_login()} function.  Thus it will generally contain the keys 'pass' and
'digest'.</p>

<p>This function calls the {@link hook_user_verify_credentials()} hook to
check whether the credentials supplied matches the credentials
for the specified user in the store.</p>]]></long-description>
        <tag line="293" name="param" description="the name of the user to verify" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="293" name="param" description="the credentials supplied by the browser" type="array" variable="$credentials">
          <type by_reference="false">array</type>
        </tag>
        <tag line="293" name="return" description="whether the credentials supplied matches those for the specified user" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="320">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="320">
        <name>$credentials</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="363" package="simpleid">
      <name>user_verify_otp</name>
      <full_name>\user_verify_otp</full_name>
      <docblock line="337">
        <description><![CDATA[Verifies a one time password (OTP) specified by the user.]]></description>
        <long-description><![CDATA[<p>This function compares an OTP supplied by a user with the OTP
calculated based on the current time and the parameters of the
algorithm.  The parameters, such as the secret key, are supplied
using in $params.  These parameters are typically stored for each
user in the user store.</p>

<p>To allow for clocks going out of sync, the current time will be
by a number (in time steps) specified in $params['drift'].  If
the OTP supplied by the user is accepted, $params['drift'] will
be also be updated with the latest difference.</p>

<p>To allow for network delay, the function will accepts OTPs which
is a number of time steps away from the OTP calculated from the
adjusted time.  The maximum number of time steps is specified in
the $max_drift parameter.</p>]]></long-description>
        <tag line="337" name="param" description="&amp;$params the OTP parameters stored" type="array" variable="$params">
          <type by_reference="false">array</type>
        </tag>
        <tag line="337" name="param" description="the OTP supplied by the user" type="string" variable="$code">
          <type by_reference="false">string</type>
        </tag>
        <tag line="337" name="param" description="the maximum drift allowed for network delay, in time steps" type="int" variable="$max_drift">
          <type by_reference="false">int</type>
        </tag>
        <tag line="337" name="return" description="whether the OTP supplied matches the OTP generated based on the specified parameters, within the maximum drift" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="363">
        <name>$params</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="363">
        <name>$code</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="363">
        <name>$max_drift</name>
        <default><![CDATA[1]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="395" package="simpleid">
      <name>_user_login</name>
      <full_name>\_user_login</full_name>
      <docblock line="387">
        <description><![CDATA[Sets the user specified by the parameter as the active user.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="387" name="param" description="the user to log in" type="array" variable="$login_user">
          <type by_reference="false">array</type>
        </tag>
        <tag line="387" name="param" description="whether the user has been actively authenticated in this session" type="bool" variable="$auth_active">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="395">
        <name>$login_user</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="395">
        <name>$auth_active</name>
        <default><![CDATA[false]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="426" package="simpleid">
      <name>user_logout</name>
      <full_name>\user_logout</full_name>
      <docblock line="420">
        <description><![CDATA[Attempts to log out a user and returns to the login form.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="420" name="param" description="the destination value to be included in the login form" type="string" variable="$destination">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="426">
        <name>$destination</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="451" package="simpleid">
      <name>_user_logout</name>
      <full_name>\_user_logout</full_name>
      <docblock line="448">
        <description><![CDATA[Logs out the user by deleting the relevant session information.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="477" package="simpleid">
      <name>user_login_form</name>
      <full_name>\user_login_form</full_name>
      <docblock line="466">
        <description><![CDATA[Displays a user login or a login verification form.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="466" name="param" description="the SimpleID location to which the user is directed if login is successful" type="string" variable="$destination">
          <type by_reference="false">string</type>
        </tag>
        <tag line="466" name="param" description="the current SimpleID state, if required by the location" type="string" variable="$state">
          <type by_reference="false">string</type>
        </tag>
        <tag line="466" name="param" description="the user name to be included in the login form; if NULL, the user is asked to supply the user name. If $mode is otp this cannot be null" type="string" variable="$fixed_uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="466" name="param" description="either credentials (login form) or otp (login verification form)" type="string" variable="$mode">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="477">
        <name>$destination</name>
        <default><![CDATA['']]></default>
        <type/>
      </argument>
      <argument line="477">
        <name>$state</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="477">
        <name>$fixed_uid</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="477">
        <name>$mode</name>
        <default><![CDATA['credentials']]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="560" package="simpleid">
      <name>user_otp_page</name>
      <full_name>\user_otp_page</full_name>
      <docblock line="556">
        <description><![CDATA[Displays the page used to set up login verification using one-time
passwords.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="655" package="simpleid">
      <name>user_public_page</name>
      <full_name>\user_public_page</full_name>
      <docblock line="650">
        <description><![CDATA[Returns the user's public page.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="650" name="param" description="the user ID" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="655">
        <name>$uid</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="702" package="simpleid">
      <name>user_ppid_page</name>
      <full_name>\user_ppid_page</full_name>
      <docblock line="697">
        <description><![CDATA[Returns the public page for a private personal ID.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="697" name="param" description="the PPID" type="string" variable="$ppid">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="702">
        <name>$ppid</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="735" package="simpleid">
      <name>user_xrds</name>
      <full_name>\user_xrds</full_name>
      <docblock line="730">
        <description><![CDATA[Returns the user's public XRDS page.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="730" name="param" description="the user ID" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="735">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="772" package="simpleid">
      <name>_user_page_profile</name>
      <full_name>\_user_page_profile</full_name>
      <docblock line="767">
        <description><![CDATA[Returns a block containing OpenID Connect user information.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="767" name="return" description="the OpenID Connect user information block" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="807" package="simpleid">
      <name>user_header</name>
      <full_name>\user_header</full_name>
      <docblock line="801">
        <description><![CDATA[Set up the user section in the header, showing the currently logged in user.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="801" name="param" description="the SimpleID state to retain once the user has logged out, if required." type="string" variable="$state">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="807">
        <name>$state</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="835" package="simpleid">
      <name>user_passauth_user_verify_credentials</name>
      <full_name>\user_passauth_user_verify_credentials</full_name>
      <docblock line="826">
        <description><![CDATA[Verifies a set of credentials using the default user name-password authentication
method.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="826" name="param" description="the name of the user to verify" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="826" name="param" description="the credentials supplied by the browser" type="array" variable="$credentials">
          <type by_reference="false">array</type>
        </tag>
        <tag line="826" name="return" description="whether the credentials supplied matches those for the specified user" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="835">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="835">
        <name>$credentials</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="868" package="simpleid">
      <name>user_cookieauth_create_cookie</name>
      <full_name>\user_cookieauth_create_cookie</full_name>
      <docblock line="856">
        <description><![CDATA[Creates a auto login cookie.]]></description>
        <long-description><![CDATA[<p>The login cookie will be based on the
current log in user.</p>]]></long-description>
        <tag line="856" name="param" description="the ID of the series of auto login cookies, Cookies belonging to the same user and computer have the same ID. If none is specified, one will be generated" type="string" variable="$id">
          <type by_reference="false">string</type>
        </tag>
        <tag line="856" name="param" description="the time at which the cookie will expire. If none is specified the time specified in {@link SIMPLEID_USER_AUTOLOGIN_EXPIRES_IN} will be used" type="int" variable="$expires">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="868">
        <name>$id</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="868">
        <name>$expires</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="899" package="simpleid">
      <name>user_cookieauth_user_auto_login</name>
      <full_name>\user_cookieauth_user_auto_login</full_name>
      <docblock line="896">
        <description><![CDATA[Verifies a auto login cookie.]]></description>
        <long-description><![CDATA[<p>If valid, log in the user automatically.</p>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="960" package="simpleid">
      <name>user_cookieauth_invalidate</name>
      <full_name>\user_cookieauth_invalidate</full_name>
      <docblock line="956">
        <description><![CDATA[Removes the auto login cookie from the user agent and the SimpleID
cache.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="991" package="simpleid">
      <name>user_totp</name>
      <full_name>\user_totp</full_name>
      <docblock line="972">
        <description><![CDATA[Calculates a Time-Based One-Time Password (TOTP) based on RFC 6238.]]></description>
        <long-description><![CDATA[<p>This function returns an integer calculated from the TOTP algorithm.
The returned integer may need to be zero-padded to return a string
with the required number of digits</p>]]></long-description>
        <tag line="972" name="param" description="the shared secret as a binary string" type="string" variable="$secret">
          <type by_reference="false">string</type>
        </tag>
        <tag line="972" name="param" description="the time to use in the HOTP algorithm. If NULL, the current time is used" type="int" variable="$time">
          <type by_reference="false">int</type>
        </tag>
        <tag line="972" name="param" description="the time step in seconds" type="int" variable="$period">
          <type by_reference="false">int</type>
        </tag>
        <tag line="972" name="param" description="the number of time steps to be added to the time to adjust for transmission delay" type="int" variable="$drift">
          <type by_reference="false">int</type>
        </tag>
        <tag line="972" name="param" description="the hashing algorithm as supported by the hash_hmac() function" type="string" variable="$algorithm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="972" name="param" description="the number of digits in the one-time password" type="int" variable="$digits">
          <type by_reference="false">int</type>
        </tag>
        <tag line="972" name="return" description="the one-time password" type="int">
          <type by_reference="false">int</type>
        </tag>
        <tag line="972" name="link" description="http://tools.ietf.org/html/rfc6238" link="http://tools.ietf.org/html/rfc6238"/>
      </docblock>
      <argument line="991">
        <name>$secret</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="991">
        <name>$time</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="991">
        <name>$period</name>
        <default><![CDATA[30]]></default>
        <type/>
      </argument>
      <argument line="991">
        <name>$drift</name>
        <default><![CDATA[0]]></default>
        <type/>
      </argument>
      <argument line="991">
        <name>$algorithm</name>
        <default><![CDATA['sha1']]></default>
        <type/>
      </argument>
      <argument line="991">
        <name>$digits</name>
        <default><![CDATA[6]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="1014" package="simpleid">
      <name>user_hotp</name>
      <full_name>\user_hotp</full_name>
      <docblock line="998">
        <description><![CDATA[Calculates a HMAC-Based One-Time Password (HOTP) based on RFC 4226.]]></description>
        <long-description><![CDATA[<p>This function returns an integer calculated from the HOTP algorithm.
The returned integer may need to be zero-padded to return a string
with the required number of digits</p>]]></long-description>
        <tag line="998" name="param" description="the shared secret as a binary string" type="string" variable="$secret">
          <type by_reference="false">string</type>
        </tag>
        <tag line="998" name="param" description="the counter value as a 64 bit in big endian encoding" type="string" variable="$data">
          <type by_reference="false">string</type>
        </tag>
        <tag line="998" name="param" description="the hashing algorithm as supported by the hash_hmac() function" type="string" variable="$algorithm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="998" name="param" description="the number of digits in the one-time password" type="int" variable="$digits">
          <type by_reference="false">int</type>
        </tag>
        <tag line="998" name="return" description="the one-time password" type="int">
          <type by_reference="false">int</type>
        </tag>
        <tag line="998" name="link" description="http://tools.ietf.org/html/rfc4226" link="http://tools.ietf.org/html/rfc4226"/>
      </docblock>
      <argument line="1014">
        <name>$secret</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="1014">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="1014">
        <name>$algorithm</name>
        <default><![CDATA['sha1']]></default>
        <type/>
      </argument>
      <argument line="1014">
        <name>$digits</name>
        <default><![CDATA[6]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="www/upgrade.php" hash="36c702ea39eb1e24a64c4ee4283202ec" package="simpleid">
    <docblock line="24">
      <description><![CDATA[SimpleID upgrade script.]]></description>
      <long-description><![CDATA[<p>This script performs various upgrades to SimpleID's storage backend, which
are required for different versions of SimpleID.</p>]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="since" description="0.7"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <include line="52" type="Include Once" package="simpleid">
      <name>version.inc.php</name>
    </include>
    <include line="53" type="Include Once" package="simpleid">
      <name>locale.inc.php</name>
    </include>
    <include line="55" type="Include Once" package="simpleid">
      <name>config.php</name>
    </include>
    <include line="57" type="Include Once" package="simpleid">
      <name>config.inc</name>
    </include>
    <include line="62" type="Include Once" package="simpleid">
      <name>config.default.php</name>
    </include>
    <include line="63" type="Include Once" package="simpleid">
      <name>log.inc.php</name>
    </include>
    <include line="64" type="Include Once" package="simpleid">
      <name>common.inc.php</name>
    </include>
    <include line="65" type="Include Once" package="simpleid">
      <name>simpleweb.inc.php</name>
    </include>
    <include line="66" type="Include Once" package="simpleid">
      <name>openid.inc.php</name>
    </include>
    <include line="67" type="Include Once" package="simpleid">
      <name>user.inc.php</name>
    </include>
    <include line="68" type="Include Once" package="simpleid">
      <name>cache.inc.php</name>
    </include>
    <include line="69" type="Include Once" package="simpleid">
      <name/>
    </include>
    <include line="70" type="Include" package="simpleid">
      <name>lib/xtemplate.class.php</name>
    </include>
    <constant namespace="global" line="58" package="simpleid">
      <name>UPGRADE_LEGACY_CONFIG_INC</name>
      <full_name>\UPGRADE_LEGACY_CONFIG_INC</full_name>
      <value><![CDATA[TRUE]]></value>
    </constant>
    <constant namespace="global" line="72" package="simpleid">
      <name>CACHE_DIR</name>
      <full_name>\CACHE_DIR</full_name>
      <value><![CDATA[SIMPLEID_CACHE_DIR]]></value>
    </constant>
    <constant namespace="global" line="74" package="simpleid">
      <name>PRE_0_7_0_VERSION</name>
      <full_name>\PRE_0_7_0_VERSION</full_name>
      <value><![CDATA['0.6.0 or earlier']]></value>
    </constant>
    <function namespace="global" line="108" package="simpleid">
      <name>upgrade_start</name>
      <full_name>\upgrade_start</full_name>
      <docblock line="103">
        <description><![CDATA[Entry point for SimpleID upgrade script.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="103" name="see" description="\global\user_init()" refers="\global\user_init()"/>
      </docblock>
    </function>
    <function namespace="global" line="180" package="simpleid">
      <name>upgrade_info</name>
      <full_name>\upgrade_info</full_name>
      <docblock line="177">
        <description><![CDATA[Displays the upgrade info page.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="205" package="simpleid">
      <name>upgrade_selection</name>
      <full_name>\upgrade_selection</full_name>
      <docblock line="200">
        <description><![CDATA[Detects the current installed version of SimpleID, selects the individual upgrade
functions applicable to this upgrade and displays the upgrade
selection page.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="258" package="simpleid">
      <name>upgrade_apply</name>
      <full_name>\upgrade_apply</full_name>
      <docblock line="255">
        <description><![CDATA[Applies the upgrade.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="301" package="simpleid">
      <name>upgrade_get_version</name>
      <full_name>\upgrade_get_version</full_name>
      <docblock line="292">
        <description><![CDATA[Detects the current installed version of SimpleID]]></description>
        <long-description><![CDATA[<p>The current installed version of SimpleID is taken from the {@link store_get() version}
application setting.  This setting is only available for versions 0.7 or later, so
if it is absent we can assume it's prior to version 0.7.</p>]]></long-description>
        <tag line="292" name="return" description="the detected version, or the string '0.6.0 or earlier'" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="313" package="simpleid">
      <name>upgrade_set_version</name>
      <full_name>\upgrade_set_version</full_name>
      <docblock line="305">
        <description><![CDATA[Sets the current version of SimpleID.]]></description>
        <long-description><![CDATA[<p>This function sets the version application setting via {@link store_get()}.
A specific version can be specified, or it can be taken from {@link SIMPLEID_VERSION}.</p>]]></long-description>
        <tag line="305" name="param" description="the version to set" type="string" variable="$version">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="313">
        <name>$version</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="334" package="simpleid">
      <name>upgrade_get_functions</name>
      <full_name>\upgrade_get_functions</full_name>
      <docblock line="318">
        <description><![CDATA[Selects the upgrade functions applicable for this upgrade.]]></description>
        <long-description><![CDATA[<p>The upgrade functions are specified by the {@link $upgrade_functions}
variable.  This variable is an associative array containing version numbers
as keys and an array of upgrade function names as values.  This function
merges all the upgrade function names of the version between the current
installed version and the upgraded version.</p>]]></long-description>
        <tag line="318" name="param" description="the version of SimpleID to upgrade from, calls {@link upgrade_get_version()} if not specified" type="string" variable="$version">
          <type by_reference="false">string</type>
        </tag>
        <tag line="318" name="return" description="an array of strings, containing the list of upgrade functions to call. The functions should be called in the same order as they appear in this array" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="334">
        <name>$version</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="360" package="simpleid">
      <name>_upgrade_version_reverse_sort</name>
      <full_name>\_upgrade_version_reverse_sort</full_name>
      <docblock line="353">
        <description><![CDATA[Callback function for uksort() to reverse sort version numbers.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="353" name="param" description="" type="string" variable="$a">
          <type by_reference="false">string</type>
        </tag>
        <tag line="353" name="param" description="" type="string" variable="$b">
          <type by_reference="false">string</type>
        </tag>
        <tag line="353" name="return" description="" type="int">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="360">
        <name>$a</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="360">
        <name>$b</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="374" package="simpleid">
      <name>upgrade_user_init</name>
      <full_name>\upgrade_user_init</full_name>
      <docblock line="364">
        <description><![CDATA[Determines whether the current user has permission to run this script.]]></description>
        <long-description><![CDATA[<p>A user has permission to run this script if:</p>

<ul>
<li>administrator=1 appears in the user's identity file; or</li>
<li>{@link $upgrade_access_check} is false</li>
</ul>

<p>If the user does not have permission, {@link upgade_access_denied()} is called</p>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="386" package="simpleid">
      <name>upgrade_access_denied</name>
      <full_name>\upgrade_access_denied</full_name>
      <docblock line="382">
        <description><![CDATA[Displays a page notifying the user that he or she does not have permission to
run the upgrade script.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="413" package="simpleid">
      <name>upgrade_rp_to_store</name>
      <full_name>\upgrade_rp_to_store</full_name>
      <docblock line="408">
        <description><![CDATA[Moves the user's site preferences from the cache to the store.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="408" name="since" description="0.7"/>
      </docblock>
    </function>
    <function namespace="global" line="438" package="simpleid">
      <name>upgrade_token_to_store</name>
      <full_name>\upgrade_token_to_store</full_name>
      <docblock line="433">
        <description><![CDATA[Moves the site token from the cache to the store.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="433" name="since" description="0.7"/>
      </docblock>
    </function>
    <function namespace="global" line="452" package="simpleid">
      <name>upgrade_config_inc_to_php</name>
      <full_name>\upgrade_config_inc_to_php</full_name>
      <docblock line="447">
        <description><![CDATA[Checks that config.inc has been renamed to config.php]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="447" name="since" description="0.9"/>
      </docblock>
    </function>
    <function namespace="global" line="463" package="simpleid">
      <name>upgrade_delete_token</name>
      <full_name>\upgrade_delete_token</full_name>
      <docblock line="458">
        <description><![CDATA[Deletes the site-token setting for a more secure version]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="458" name="since" description="0.9"/>
      </docblock>
    </function>
  </file>
  <file path="www/common.inc.php" hash="35b24e9ade0b54f617c638b65d1306cf" package="simpleid">
    <docblock line="30">
      <description><![CDATA[Common functions used by SimpleID, and the implementation of extensions.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="30" name="package" description="simpleid"/>
      <tag line="30" name="filesource" description=""/>
    </docblock>
    <include line="584" type="Include Once" package="simpleid">
      <name/>
    </include>
    <function namespace="global" line="42" package="simpleid">
      <name>set_message</name>
      <full_name>\set_message</full_name>
      <docblock line="37">
        <description><![CDATA[Sets a message to display to the user on the rendered SimpleID page.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="37" name="param" description="the message to set" type="string" variable="$msg">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="42">
        <name>$msg</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="54" package="simpleid">
      <name>indirect_fatal_error</name>
      <full_name>\indirect_fatal_error</full_name>
      <docblock line="49">
        <description><![CDATA[Displays a fatal error message and exits.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="49" name="param" description="the message to set" type="string" variable="$error">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="54">
        <name>$error</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="74" package="simpleid">
      <name>header_response_code</name>
      <full_name>\header_response_code</full_name>
      <docblock line="64">
        <description><![CDATA[Send a HTTP response code to the user agent.]]></description>
        <long-description><![CDATA[<p>The format of the HTTP response code depends on the way PHP is run.
When run as an Apache module, a properly formatted HTTP response
string is sent.  When run via CGI, the response code is sent via the
Status response header.</p>]]></long-description>
        <tag line="64" name="param" description="the response code along" type="string" variable="$code">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="74">
        <name>$code</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="94" package="simpleid">
      <name>is_https</name>
      <full_name>\is_https</full_name>
      <docblock line="82">
        <description><![CDATA[Determines whether the current connection with the user agent is via
HTTPS.]]></description>
        <long-description><![CDATA[<p>HTTPS is detected if one of the following occurs:</p>

<ul>
<li>$_SERVER['HTTPS'] is set to 'on' (Apache installations)</li>
<li>$_SERVER['HTTP_X_FORWARDED_PROTO'] is set to 'https' (reverse proxies)</li>
<li>$_SERVER['HTTP_FRONT_END_HTTPS'] is set to 'on'</li>
</ul>]]></long-description>
        <tag line="82" name="return" description="true if the connection is via HTTPS" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="123" package="simpleid">
      <name>check_https</name>
      <full_name>\check_https</full_name>
      <docblock line="101">
        <description><![CDATA[Ensure the current connection with the user agent is secure with HTTPS.]]></description>
        <long-description><![CDATA[<p>This function uses {@link is_https()} to determine whether the connection
is via HTTPS.  If it is, this function will return successfully.</p>

<p>If it is not, what happens next is determined by the following steps.</p>

<ol>
<li>If $allow_override is true and {@link SIMPLEID_ALLOW_PLAINTEXT} is also true,
then the function will return successfully</li>
<li>Otherwise, then it will either redirect (if $action is
redirect) or return an error (if $action is error)</li>
</ol>]]></long-description>
        <tag line="101" name="param" description="what to do if connection is not secure - either 'redirect' or 'error'" type="string" variable="$action">
          <type by_reference="false">string</type>
        </tag>
        <tag line="101" name="param" description="whether SIMPLEID_ALLOW_PLAINTEXT is checked to see if an unencrypted connection is allowed" type="boolean" variable="$allow_override">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="101" name="param" description="if $action is redirect, what URL to redirect to. If null, this will redirect to the same page (albeit with an HTTPS connection)" type="string" variable="$redirect_url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="101" name="param" description="whether HTTP Strict Transport Security is active" type="boolean" variable="$strict">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="101" name="see" description="\global\SIMPLEID_ALLOW_PLAINTEXT" refers="\global\SIMPLEID_ALLOW_PLAINTEXT"/>
      </docblock>
      <argument line="123">
        <name>$action</name>
        <default><![CDATA['redirect']]></default>
        <type/>
      </argument>
      <argument line="123">
        <name>$allow_override</name>
        <default><![CDATA[false]]></default>
        <type/>
      </argument>
      <argument line="123">
        <name>$redirect_url</name>
        <default><![CDATA[null]]></default>
        <type/>
      </argument>
      <argument line="123">
        <name>$strict</name>
        <default><![CDATA[true]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="162" package="simpleid">
      <name>fix_http_request</name>
      <full_name>\fix_http_request</full_name>
      <docblock line="155">
        <description><![CDATA[Fix PHP's handling of request data.]]></description>
        <long-description><![CDATA[<p>PHP changes dots in all request parameters
to underscores when creating the $_GET, $_POST and $_REQUEST arrays.</p>

<p>This function scans the original query string and POST parameters and fixes
them.</p>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="215" package="simpleid">
      <name>parse_http_query</name>
      <full_name>\parse_http_query</full_name>
      <docblock line="207">
        <description><![CDATA[Parses a query string.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="207" name="param" description="the query string to parse" type="string" variable="$query">
          <type by_reference="false">string</type>
        </tag>
        <tag line="207" name="return" description="an array containing the parsed key-value pairs" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="207" name="since" description="0.7"/>
      </docblock>
      <argument line="215">
        <name>$query</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="246" package="simpleid">
      <name>get_user_agent_id</name>
      <full_name>\get_user_agent_id</full_name>
      <docblock line="231">
        <description><![CDATA[Assigns and returns a unique ID for the user agent (UAID).]]></description>
        <long-description><![CDATA[<p>A UAID uniquely identifies the user agent (e.g. browser) used to
make the HTTP request.  The UAID is stored in a long-dated
cookie.  Therefore, the UAID may be useful for security purposes.</p>

<p>This function will look for a cookie sent by the user agent with
the name returned by {@link simpleid_cookie_name()} with a suffix
of uaid.  If the cookie does not exist, it will generate a
random UAID and return it to the user agent with a Set-Cookie
response header.</p>]]></long-description>
        <tag line="231" name="return" description="the UAID" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="277" package="simpleid">
      <name>negotiate_content_type</name>
      <full_name>\negotiate_content_type</full_name>
      <docblock line="254">
        <description><![CDATA[Content type negotiation using the Accept Header.]]></description>
        <long-description><![CDATA[<p>Under HTTP, the user agent is able to negoatiate the content type returned with
the server using HTTP Accept header.  This header contains a comma-delimited
list of items (e.g. content types) which the user agent is able to
accept, ranked by a quality parameter.</p>

<p>This function takes the header from the user agent, compares it against the
content types which the server can provide, then returns the item which the highest
quality which the server can provide.</p>]]></long-description>
        <tag line="254" name="param" description="an array of content types which the server can provide" type="array" variable="$content_types">
          <type by_reference="false">array</type>
        </tag>
        <tag line="254" name="param" description="the header string provided by the user agent. If NULL, this defaults to $_SERVER['HTTP_ACCEPT'] if available" type="string" variable="$accept_header">
          <type by_reference="false">string</type>
        </tag>
        <tag line="254" name="return" description="the negotiated content type, FALSE if $accept_header is NULL and the user agent did not provide an Accept header, or NULL if the negotiation is unsuccessful" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="254" name="since" description="0.8"/>
      </docblock>
      <argument line="277">
        <name>$content_types</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="277">
        <name>$accept_header</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="334" package="simpleid">
      <name>pickle</name>
      <full_name>\pickle</full_name>
      <docblock line="327">
        <description><![CDATA[Serialises a variable for inclusion as a URL parameter.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="327" name="param" description="the data to serialise" type="mixed" variable="$data">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="327" name="return" description="serialised data" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="327" name="see" description="\global\unpickle()" refers="\global\unpickle()"/>
      </docblock>
      <argument line="334">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="345" package="simpleid">
      <name>unpickle</name>
      <full_name>\unpickle</full_name>
      <docblock line="338">
        <description><![CDATA[Deserialises data specified in a URL parameter as a variable.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="338" name="param" description="the serialised data" type="string" variable="$pickle">
          <type by_reference="false">string</type>
        </tag>
        <tag line="338" name="return" description="the deserialised data" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="338" name="see" description="\global\pickle()" refers="\global\pickle()"/>
      </docblock>
      <argument line="345">
        <name>$pickle</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="355" package="simpleid">
      <name>get_request_uri</name>
      <full_name>\get_request_uri</full_name>
      <docblock line="349">
        <description><![CDATA[Obtains the URI of the current request, given a base URI.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="349" name="param" description="the base URI" type="string" variable="$base">
          <type by_reference="false">string</type>
        </tag>
        <tag line="349" name="return" description="the request URI" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="355">
        <name>$base</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="377" package="simpleid">
      <name>get_base_path</name>
      <full_name>\get_base_path</full_name>
      <docblock line="366">
        <description><![CDATA[Returns the base URL path, relative to the current host, of the SimpleID
installation.]]></description>
        <long-description><![CDATA[<p>This is worked out from {@link SIMPLEID_BASE_URL}.  It will always contain
a trailing slash.</p>]]></long-description>
        <tag line="366" name="return" description="the base URL path" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="366" name="since" description="0.8"/>
        <tag line="366" name="see" description="\global\SIMPLEID_BASE_URL" refers="\global\SIMPLEID_BASE_URL"/>
      </docblock>
    </function>
    <function namespace="global" line="400" package="simpleid">
      <name>is_base_https</name>
      <full_name>\is_base_https</full_name>
      <docblock line="394">
        <description><![CDATA[Determines whether the {@link SIMPLEID_BASE_URL} configuration option is a
HTTPS URL.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="394" name="return" description="if SIMPLEID_BASE_URL is a HTTPS URL" type="true">
          <type by_reference="false">true</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="416" package="simpleid">
      <name>simpleid_url</name>
      <full_name>\simpleid_url</full_name>
      <docblock line="404">
        <description><![CDATA[Obtains a SimpleID URL.]]></description>
        <long-description><![CDATA[<p>URLs produced by SimpleID should use this function.</p>]]></long-description>
        <tag line="404" name="param" description="the q parameter" type="string" variable="$q">
          <type by_reference="false">string</type>
        </tag>
        <tag line="404" name="param" description="a properly encoded query string" type="string" variable="$params">
          <type by_reference="false">string</type>
        </tag>
        <tag line="404" name="param" description="whether a relative URL should be returned" type="bool" variable="$relative">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="404" name="param" description="if $relative is false, either 'https' to force an HTTPS connection, 'http' to force an unencrypted HTTP connection, 'detect' to base on the current connection, or NULL to vary based on SIMPLEID_BASE_URL" type="string" variable="$secure">
          <type by_reference="false">string</type>
        </tag>
        <tag line="404" name="return" description="the url" type="string">
          <type by_reference="false">string</type>
        </tag>
        <tag line="404" name="since" description="0.7"/>
      </docblock>
      <argument line="416">
        <name>$q</name>
        <default><![CDATA['']]></default>
        <type/>
      </argument>
      <argument line="416">
        <name>$params</name>
        <default><![CDATA['']]></default>
        <type/>
      </argument>
      <argument line="416">
        <name>$relative</name>
        <default><![CDATA[false]]></default>
        <type/>
      </argument>
      <argument line="416">
        <name>$secure</name>
        <default><![CDATA[null]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="461" package="simpleid">
      <name>simpleid_host_url</name>
      <full_name>\simpleid_host_url</full_name>
      <docblock line="453">
        <description><![CDATA[Obtains the URL of the host of the SimpleID's installation.]]></description>
        <long-description><![CDATA[<p>The host is worked
out based on SIMPLEID_BASE_URL</p>]]></long-description>
        <tag line="453" name="param" description="if $relative is false, either 'https' to force an HTTPS connection, 'http' to force an unencrypted HTTP connection, or NULL to vary based on SIMPLEID_BASE_URL" type="string" variable="$secure">
          <type by_reference="false">string</type>
        </tag>
        <tag line="453" name="return" description="the url" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="461">
        <name>$secure</name>
        <default><![CDATA[null]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="491" package="simpleid">
      <name>simpleid_cookie_name</name>
      <full_name>\simpleid_cookie_name</full_name>
      <docblock line="484">
        <description><![CDATA[Returns a relatively unique cookie name based on a specified suffix and
SIMPLEID_BASE_URL.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="484" name="param" description="the cookie name suffix" type="string" variable="$suffix">
          <type by_reference="false">string</type>
        </tag>
        <tag line="484" name="return" description="the cookie name" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="491">
        <name>$suffix</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="510" package="simpleid">
      <name>get_form_token</name>
      <full_name>\get_form_token</full_name>
      <docblock line="500">
        <description><![CDATA[Obtains a form token given a form ID.]]></description>
        <long-description><![CDATA[<p>Form tokens are used in SimpleID forms to guard against cross-site forgery
attacks.</p>]]></long-description>
        <tag line="500" name="param" description="the form ID" type="string" variable="$id">
          <type by_reference="false">string</type>
        </tag>
        <tag line="500" name="param" description="whether to bind the form token to the current session" type="bool" variable="$bind_session">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="500" name="return" description="a form token" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="510">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="510">
        <name>$bind_session</name>
        <default><![CDATA[TRUE]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="531" package="simpleid">
      <name>validate_form_token</name>
      <full_name>\validate_form_token</full_name>
      <docblock line="523">
        <description><![CDATA[Checks whether a form token is valid]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="523" name="param" description="the token returned by the user agent" type="string" variable="$token">
          <type by_reference="false">string</type>
        </tag>
        <tag line="523" name="param" description="the form ID" type="string" variable="$id">
          <type by_reference="false">string</type>
        </tag>
        <tag line="523" name="param" description="whether the token has been bound to the current session" type="bool" variable="$bind_session">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="523" name="return" description="true if the form token is valid" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="531">
        <name>$token</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="531">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="531">
        <name>$bind_session</name>
        <default><![CDATA[TRUE]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="539" package="simpleid">
      <name>_get_form_token</name>
      <full_name>\_get_form_token</full_name>
      <argument line="539">
        <name>$site_token</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="539">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="539">
        <name>$bind_session</name>
        <default><![CDATA[TRUE]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="578" package="simpleid">
      <name>extension_init</name>
      <full_name>\extension_init</full_name>
      <docblock line="573">
        <description><![CDATA[Initialises the extension mechanism.]]></description>
        <long-description><![CDATA[<p>This function looks up the extensions
to load in the {@link SIMPLEID_EXTENSIONS} constants, loads them, then
calls the ns hook.</p>]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="595" package="simpleid">
      <name>extension_invoke_all</name>
      <full_name>\extension_invoke_all</full_name>
      <docblock line="588">
        <description><![CDATA[Invokes a hook in all the loaded extensions.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="588" name="param" description="the name of the hook to call" type="string" variable="$function">
          <type by_reference="false">string</type>
        </tag>
        <tag line="588" name="param" description="the arguments to the hook" type="mixed" variable="$args">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="588" name="return" description="the return values from the hook" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="625" package="simpleid">
      <name>extension_invoke</name>
      <full_name>\extension_invoke</full_name>
      <docblock line="617">
        <description><![CDATA[Invokes a hook in a specified extension.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="617" name="param" description="the extension to call" type="string" variable="$extension">
          <type by_reference="false">string</type>
        </tag>
        <tag line="617" name="param" description="the name of the hook to call" type="string" variable="$function">
          <type by_reference="false">string</type>
        </tag>
        <tag line="617" name="param" description="the arguments to the hook" type="mixed" variable="$args">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="617" name="return" description="the return value from the hook" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="641" package="simpleid">
      <name>get_extensions</name>
      <full_name>\get_extensions</full_name>
      <docblock line="636">
        <description><![CDATA[Returns an array of currently loaded extensions.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="636" name="return" description="a list of the names of the currently loaded extensions." type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <parse_markers>
      <error line="539" code="50009">No DocBlock was found for function \_get_form_token()</error>
      <notice line="588" code="50013">Parameter $function could not be found in \extension_invoke_all()</notice>
      <notice line="588" code="50013">Parameter $args could not be found in \extension_invoke_all()</notice>
      <notice line="617" code="50013">Parameter $extension could not be found in \extension_invoke()</notice>
      <notice line="617" code="50013">Parameter $function could not be found in \extension_invoke()</notice>
      <notice line="617" code="50013">Parameter $args could not be found in \extension_invoke()</notice>
    </parse_markers>
  </file>
  <file path="www/log.inc.php" hash="c21dbb752498b8898377e9f503340f0c" package="simpleid">
    <docblock line="24">
      <description><![CDATA[Functions for logging.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="32" package="simpleid">
      <name>SIMPLEID_LOG_DEBUG</name>
      <full_name>\SIMPLEID_LOG_DEBUG</full_name>
      <value><![CDATA[5]]></value>
      <docblock line="31">
        <description><![CDATA[Log level]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="34" package="simpleid">
      <name>SIMPLEID_LOG_INFO</name>
      <full_name>\SIMPLEID_LOG_INFO</full_name>
      <value><![CDATA[4]]></value>
      <docblock line="33">
        <description><![CDATA[Log level]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="36" package="simpleid">
      <name>SIMPLEID_LOG_NOTICE</name>
      <full_name>\SIMPLEID_LOG_NOTICE</full_name>
      <value><![CDATA[3]]></value>
      <docblock line="35">
        <description><![CDATA[Log level]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="38" package="simpleid">
      <name>SIMPLEID_LOG_WARN</name>
      <full_name>\SIMPLEID_LOG_WARN</full_name>
      <value><![CDATA[2]]></value>
      <docblock line="37">
        <description><![CDATA[Log level]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="40" package="simpleid">
      <name>SIMPLEID_LOG_ERROR</name>
      <full_name>\SIMPLEID_LOG_ERROR</full_name>
      <value><![CDATA[1]]></value>
      <docblock line="39">
        <description><![CDATA[Log level]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="42" package="simpleid">
      <name>SIMPLEID_LOG_FATAL</name>
      <full_name>\SIMPLEID_LOG_FATAL</full_name>
      <value><![CDATA[0]]></value>
      <docblock line="41">
        <description><![CDATA[Log level]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="60" package="simpleid">
      <name>log_open</name>
      <full_name>\log_open</full_name>
      <docblock line="53">
        <description><![CDATA[Opens the log file.]]></description>
        <long-description><![CDATA[<p>This function opens a pointed to the log file for later usage.</p>]]></long-description>
        <tag line="53" name="return" description="true if the log file is opened successfully." type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="76" package="simpleid">
      <name>log_close</name>
      <full_name>\log_close</full_name>
      <docblock line="73">
        <description><![CDATA[Closes the log file, if it is open.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="90" package="simpleid">
      <name>log_debug</name>
      <full_name>\log_debug</full_name>
      <docblock line="84">
        <description><![CDATA[Logs a DEBUG message.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="84" name="param" description="the message to log" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="84" name="see" description="\global\_log_write()" refers="\global\_log_write()"/>
      </docblock>
      <argument line="90">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="100" package="simpleid">
      <name>log_info</name>
      <full_name>\log_info</full_name>
      <docblock line="94">
        <description><![CDATA[Logs an INFO message.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="94" name="param" description="the message to log" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="94" name="see" description="\global\_log_write()" refers="\global\_log_write()"/>
      </docblock>
      <argument line="100">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="110" package="simpleid">
      <name>log_notice</name>
      <full_name>\log_notice</full_name>
      <docblock line="104">
        <description><![CDATA[Logs a NOTICE message.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="104" name="param" description="the message to log" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="104" name="see" description="\global\_log_write()" refers="\global\_log_write()"/>
      </docblock>
      <argument line="110">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="120" package="simpleid">
      <name>log_warn</name>
      <full_name>\log_warn</full_name>
      <docblock line="114">
        <description><![CDATA[Logs a WARN message.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="114" name="param" description="the message to log" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="114" name="see" description="\global\_log_write()" refers="\global\_log_write()"/>
      </docblock>
      <argument line="120">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="130" package="simpleid">
      <name>log_error</name>
      <full_name>\log_error</full_name>
      <docblock line="124">
        <description><![CDATA[Logs a ERROR message.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="124" name="param" description="the message to log" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="124" name="see" description="\global\_log_write()" refers="\global\_log_write()"/>
      </docblock>
      <argument line="130">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="140" package="simpleid">
      <name>log_fatal</name>
      <full_name>\log_fatal</full_name>
      <docblock line="134">
        <description><![CDATA[Logs a FATAL message.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="134" name="param" description="the message to log" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="134" name="see" description="\global\_log_write()" refers="\global\_log_write()"/>
      </docblock>
      <argument line="140">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="152" package="simpleid">
      <name>log_array</name>
      <full_name>\log_array</full_name>
      <docblock line="144">
        <description><![CDATA[Converts an array into a string for logging purposes.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="144" name="param" description="the array the convert" type="array" variable="$array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="144" name="param" description="an array of keys to include in the converted string. Set to false if all the keys in the array should be included" type="array" variable="$keys">
          <type by_reference="false">array</type>
        </tag>
        <tag line="144" name="return" description="the converted string." type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="152">
        <name>$array</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="152">
        <name>$keys</name>
        <default><![CDATA[false]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="171" package="simpleid">
      <name>_log_write</name>
      <full_name>\_log_write</full_name>
      <docblock line="164">
        <description><![CDATA[Logs a message]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="164" name="param" description="the message to log" type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
        <tag line="164" name="param" description="the log level" type="int" variable="$level">
          <type by_reference="false">int</type>
        </tag>
        <tag line="164" name="return" description="true if the log has been written successfully" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="171">
        <name>$message</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="171">
        <name>$level</name>
        <default><![CDATA[false]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="www/discovery.inc.php" hash="255530454f12113d590edec49b215426" package="simpleid">
    <docblock line="24">
      <description><![CDATA[Support for XRDS based discovery.]]></description>
      <long-description><![CDATA[<p>The functions for this file supports HTTP-based identifiers.  For XRIs, the
resolution service xri.net is used to resolve to HTTP-based URLs.</p>]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="since" description="0.7"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <include line="35" type="Include Once" package="simpleid">
      <name>http.inc.php</name>
    </include>
    <constant namespace="global" line="40" package="simpleid">
      <name>XRDS_NS</name>
      <full_name>\XRDS_NS</full_name>
      <value><![CDATA['xri://$xrds']]></value>
      <docblock line="37">
        <description><![CDATA[The namespace identifier for an XRDS document.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="45" package="simpleid">
      <name>XRD2_NS</name>
      <full_name>\XRD2_NS</full_name>
      <value><![CDATA['xri://$xrd*($v*2.0)']]></value>
      <docblock line="42">
        <description><![CDATA[The namespace identifier for XRDS version 2.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="50" package="simpleid">
      <name>XRDS_SIMPLE_NS</name>
      <full_name>\XRDS_SIMPLE_NS</full_name>
      <value><![CDATA['http://xrds-simple.net/core/1.0']]></value>
      <docblock line="47">
        <description><![CDATA[The namespace identifier for XRDS Simple.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="55" package="simpleid">
      <name>XRDS_SIMPLE_TYPE</name>
      <full_name>\XRDS_SIMPLE_TYPE</full_name>
      <value><![CDATA['xri://$xrds*simple']]></value>
      <docblock line="52">
        <description><![CDATA[The type identifier for XRDS Simple.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <constant namespace="global" line="60" package="simpleid">
      <name>XRD_OPENID_NS</name>
      <full_name>\XRD_OPENID_NS</full_name>
      <value><![CDATA['http://openid.net/xmlns/1.0']]></value>
      <docblock line="57">
        <description><![CDATA[The namespace identifier for OpenID services.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="79" package="simpleid">
      <name>discovery_xrds_discover</name>
      <full_name>\discovery_xrds_discover</full_name>
      <docblock line="62">
        <description><![CDATA[Obtains the services for particular identifier.]]></description>
        <long-description><![CDATA[<p>This function attempts to discover and obtain the XRDS document associated
with the identifier, parses the XRDS document and returns an array of
services.</p>

<p>If an XRDS document is not found, and $openid is set to true, this function
will also attempt to discover OpenID services by looking for link elements
with rel of openid.server or openid2.provider in the discovered HTML document.</p>]]></long-description>
        <tag line="62" name="param" description="the identifier" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="62" name="param" description="if true, performs additional discovery of OpenID services by looking for link elements within the discovered document" type="bool" variable="$openid">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="62" name="return" description="an array of discovered services, or an empty array if no services are found" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="79">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="79">
        <name>$openid</name>
        <default><![CDATA[FALSE]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="102" package="simpleid">
      <name>discovery_xrds_services_by_type</name>
      <full_name>\discovery_xrds_services_by_type</full_name>
      <docblock line="93">
        <description><![CDATA[Given an array of discovered services, obtains information on services of
a particular type.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="93" name="param" description="the discovered services" type="array" variable="$services">
          <type by_reference="false">array</type>
        </tag>
        <tag line="93" name="param" description="the URI of the type of service to obtain" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="93" name="return" description="an array of matching services, or an empty array of no services match" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="102">
        <name>$services</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="102">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="122" package="simpleid">
      <name>discovery_xrds_service_by_id</name>
      <full_name>\discovery_xrds_service_by_id</full_name>
      <docblock line="113">
        <description><![CDATA[Given an array of discovered services, obtains information on the service of
a specified ID.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="113" name="param" description="the discovered services" type="array" variable="$services">
          <type by_reference="false">array</type>
        </tag>
        <tag line="113" name="param" description="the XML ID of the service in the XRDS document" type="string" variable="$id">
          <type by_reference="false">string</type>
        </tag>
        <tag line="113" name="return" description="the matching service, or NULL of no services are found" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="122">
        <name>$services</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="122">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="139" package="simpleid">
      <name>discovery_xrds_get</name>
      <full_name>\discovery_xrds_get</full_name>
      <docblock line="129">
        <description><![CDATA[Obtains a XRDS document at a particular URL.]]></description>
        <long-description><![CDATA[<p>Performs Yadis discovery if
the URL does not produce a XRDS document.</p>]]></long-description>
        <tag line="129" name="param" description="the URL" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="129" name="param" description="whether to check the content type of the response is application/xrds+xml" type="bool" variable="$check">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="129" name="param" description="the number of tries to make" type="int" variable="$retries">
          <type by_reference="false">int</type>
        </tag>
        <tag line="129" name="return" description="the contents of the XRDS document" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="139">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="139">
        <name>$check</name>
        <default><![CDATA[TRUE]]></default>
        <type/>
      </argument>
      <argument line="139">
        <name>$retries</name>
        <default><![CDATA[5]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="168" package="simpleid">
      <name>discovery_xrds_normalize</name>
      <full_name>\discovery_xrds_normalize</full_name>
      <docblock line="158">
        <description><![CDATA[Normalises an identifier for discovery.]]></description>
        <long-description><![CDATA[<p>If the identifier begins with xri://, acct: or mailto:, this is stripped out.  If the identifier
does not begin with a valid URI scheme, http:// is assumed and added to the
identifier.</p>]]></long-description>
        <tag line="158" name="param" description="the identifier to normalise" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="158" name="return" description="the normalised identifier" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="168">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="191" package="simpleid">
      <name>discovery_xrds_url</name>
      <full_name>\discovery_xrds_url</full_name>
      <docblock line="184">
        <description><![CDATA[Obtains a URL for an identifier.]]></description>
        <long-description><![CDATA[<p>If the identifier is a XRI, the XRI resolution
service is used to convert the identifier to a URL.</p>]]></long-description>
        <tag line="184" name="param" description="the identifier" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="184" name="return" description="the URL" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="191">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="211" package="simpleid">
      <name>discovery_is_xri</name>
      <full_name>\discovery_is_xri</full_name>
      <docblock line="203">
        <description><![CDATA[Determines whether an identifier is an XRI.]]></description>
        <long-description><![CDATA[<p>XRI identifiers either start with xri:// or with @, =, +, $ or !.</p>]]></long-description>
        <tag line="203" name="param" description="the parameter to test" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="203" name="return" description="true if the identifier is an XRI" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="211">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="229" package="simpleid">
      <name>discovery_is_email</name>
      <full_name>\discovery_is_email</full_name>
      <docblock line="218">
        <description><![CDATA[Determines whether an identifier is an e-mail address.]]></description>
        <long-description><![CDATA[<p>An identifier is an e-mail address if it:</p>

<ul>
<li>has a single @ character</li>
<li>does not have a slash character</li>
</ul>]]></long-description>
        <tag line="218" name="param" description="the parameter to test" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="218" name="return" description="true if the identifier is an e-mail address" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="229">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="261" package="simpleid">
      <name>discovery_xrds_priority_sort</name>
      <full_name>\discovery_xrds_priority_sort</full_name>
      <docblock line="249">
        <description><![CDATA[Callback function to sort service and URI elements based on priorities
specified in the XRDS document.]]></description>
        <long-description><![CDATA[<p>The XRDS specification allows multiple instances of certain elements, such
as Service and URI.  The specification allows an attribute called priority
so that the document creator can specify the order the elements should be used.</p>]]></long-description>
        <tag line="249" name="param" description="" type="array" variable="$a">
          <type by_reference="false">array</type>
        </tag>
        <tag line="249" name="param" description="" type="array" variable="$b">
          <type by_reference="false">array</type>
        </tag>
        <tag line="249" name="return" description="" type="int">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="261">
        <name>$a</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="261">
        <name>$b</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="280" package="simpleid">
      <name>discovery_xrds_parse</name>
      <full_name>\discovery_xrds_parse</full_name>
      <docblock line="272">
        <description><![CDATA[Parses an XRDS document to return services available.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="272" name="param" description="the XRDS document" type="string" variable="$xrds">
          <type by_reference="false">string</type>
        </tag>
        <tag line="272" name="return" description="the parsed structure" type="array">
          <type by_reference="false">array</type>
        </tag>
        <tag line="272" name="see" description="\global\XRDSParser" refers="\global\XRDSParser"/>
      </docblock>
      <argument line="280">
        <name>$xrds</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="301" package="simpleid">
      <name>discovery_html_get_services</name>
      <full_name>\discovery_html_get_services</full_name>
      <docblock line="290">
        <description><![CDATA[Obtains the OpenID services for particular identifier by scanning for link
elements in the returned document.]]></description>
        <long-description><![CDATA[<p>Note that this function does not use the YADIS protocol to scan for services.
To use the YADIS protocol, use {@link discovery_get_services()}.</p>]]></long-description>
        <tag line="290" name="param" description="the URL" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="290" name="return" description="an array of discovered services, or an empty array if no services are found" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="301">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="343" package="simpleid">
      <name>_discovery_meta_httpequiv</name>
      <full_name>\_discovery_meta_httpequiv</full_name>
      <docblock line="334">
        <description><![CDATA[Searches through an HTML document to obtain the value of a meta
element with a specified http-equiv attribute.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="334" name="param" description="the http-equiv attribute for which to search" type="string" variable="$equiv">
          <type by_reference="false">string</type>
        </tag>
        <tag line="334" name="param" description="the HTML document to search" type="string" variable="$html">
          <type by_reference="false">string</type>
        </tag>
        <tag line="334" name="return" description="the value of the meta element, or FALSE if the element is not found" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="343">
        <name>$equiv</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="343">
        <name>$html</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="366" package="simpleid">
      <name>_discovery_link_rel</name>
      <full_name>\_discovery_link_rel</full_name>
      <docblock line="357">
        <description><![CDATA[Searches through an HTML document to obtain the value of a link
element with a specified rel attribute.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="357" name="param" description="the rel attribute for which to search" type="string" variable="$rel">
          <type by_reference="false">string</type>
        </tag>
        <tag line="357" name="param" description="the HTML document to search" type="string" variable="$html">
          <type by_reference="false">string</type>
        </tag>
        <tag line="357" name="return" description="the href of the link element, or FALSE if the element is not found" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="366">
        <name>$rel</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="366">
        <name>$html</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="643" package="simpleid">
      <name>rfc3986_urlencode</name>
      <full_name>\rfc3986_urlencode</full_name>
      <docblock line="630">
        <description><![CDATA[Encodes a URL using RFC 3986.]]></description>
        <long-description><![CDATA[<p>PHP's rawurlencode function encodes a URL using RFC 1738.  RFC 1738 has been
updated by RFC 3986, which change the list of characters which needs to be
encoded.</p>

<p>Strictly correct encoding is required for various purposes, such as OAuth
signature base strings.</p>]]></long-description>
        <tag line="630" name="param" description="the URL to encode" type="string" variable="$s">
          <type by_reference="false">string</type>
        </tag>
        <tag line="630" name="return" description="the encoded URL" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="643">
        <name>$s</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="global" line="388" package="simpleid">
      <extends/>
      <name>XRDSParser</name>
      <full_name>\XRDSParser</full_name>
      <docblock line="378">
        <description><![CDATA[A simple XRDS parser.]]></description>
        <long-description><![CDATA[<p>This parser uses the classic expat functions available in PHP to parse the
XRDS Simple XML document.</p>

<p>The result is an array of discovered services.</p>]]></long-description>
        <tag line="378" name="link" description="http://xrds-simple.net/" link="http://xrds-simple.net/"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="394" namespace="global" package="simpleid">
        <name>$parser</name>
        <default><![CDATA[]]></default>
        <docblock line="389">
          <description><![CDATA[XML parser]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="389" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="389" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="401" namespace="global" package="simpleid">
        <name>$services</name>
        <default><![CDATA[array()]]></default>
        <docblock line="396">
          <description><![CDATA[Discovered services]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="396" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="396" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="408" namespace="global" package="simpleid">
        <name>$in_service</name>
        <default><![CDATA[FALSE]]></default>
        <docblock line="403">
          <description><![CDATA[State: are we parsing a service element?]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="403" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="403" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="415" namespace="global" package="simpleid">
        <name>$_buffer</name>
        <default><![CDATA[]]></default>
        <docblock line="410">
          <description><![CDATA[CDATA buffer]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="410" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="410" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="421" namespace="global" package="simpleid">
        <name>$_attribs</name>
        <default><![CDATA[array()]]></default>
        <docblock line="416">
          <description><![CDATA[Attributes buffer]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="416" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="416" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="428" namespace="global" package="simpleid">
        <name>$priority</name>
        <default><![CDATA[NULL]]></default>
        <docblock line="423">
          <description><![CDATA[priority attribute buffer]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="423" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="423" name="access" description="private"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="435" namespace="global" package="simpleid">
        <name>$service</name>
        <default><![CDATA[array()]]></default>
        <docblock line="430">
          <description><![CDATA[Currently parsed service buffer]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="430" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="430" name="access" description="private"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="442" package="simpleid">
        <name>XRDSParser</name>
        <full_name>XRDSParser</full_name>
        <docblock line="437">
          <description><![CDATA[Creates an instance of the XRDS parser.]]></description>
          <long-description><![CDATA[<p>This constructor also initialises the underlying XML parser.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="458" package="simpleid">
        <name>free</name>
        <full_name>free</full_name>
        <docblock line="450">
          <description><![CDATA[Frees memory associated with the underlying XML parser.]]></description>
          <long-description><![CDATA[<p>Note that only the memory associated with the underlying XML parser is
freed.  Memory associated with the class itself is not freed.</p>]]></long-description>
          <tag line="450" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="471" package="simpleid">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="462">
          <description><![CDATA[Parses an XRDS document.]]></description>
          <long-description><![CDATA[<p>Once the parsing is complete, use {@link XRDSParser::services()} to obtain
the services extracted from the document.</p>]]></long-description>
          <tag line="462" name="param" description="the XML document to parse" type="string" variable="$xml">
            <type by_reference="false">string</type>
          </tag>
          <tag line="462" name="access" description="public"/>
        </docblock>
        <argument line="471">
          <name>$xml</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="482" package="simpleid">
        <name>services</name>
        <full_name>services</full_name>
        <docblock line="475">
          <description><![CDATA[Gets an array of discovered services.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="475" name="return" description="an array of discovered services, or an empty array" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="475" name="access" description="public"/>
          <tag line="475" name="see" description="\global\XRDSParser::parse()" refers="\global\XRDSParser::parse()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="491" package="simpleid">
        <name>element_start</name>
        <full_name>element_start</full_name>
        <docblock line="486">
          <description><![CDATA[XML parser callback]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="486" name="access" description="private"/>
        </docblock>
        <argument line="491">
          <name>$parser</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="491">
          <name>$qualified</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="491">
          <name>$attribs</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="533" package="simpleid">
        <name>element_end</name>
        <full_name>element_end</full_name>
        <docblock line="528">
          <description><![CDATA[XML parser callback]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="528" name="access" description="private"/>
        </docblock>
        <argument line="533">
          <name>$parser</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="533">
          <name>$qualified</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="580" package="simpleid">
        <name>cdata</name>
        <full_name>cdata</full_name>
        <docblock line="575">
          <description><![CDATA[XML parser callback]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="575" name="access" description="private"/>
        </docblock>
        <argument line="580">
          <name>$parser</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="580">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="593" package="simpleid">
        <name>parse_namespace</name>
        <full_name>parse_namespace</full_name>
        <docblock line="584">
          <description><![CDATA[Parses a namespace-qualified element name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="584" name="param" description="the qualified name" type="string" variable="$qualified">
            <type by_reference="false">string</type>
          </tag>
          <tag line="584" name="return" description="an array with two elements - the first element contains the namespace qualifier (or an empty string), the second element contains the element name" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="584" name="access" description="protected"/>
        </docblock>
        <argument line="593">
          <name>$qualified</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="616" package="simpleid">
        <name>flatten_uris</name>
        <full_name>flatten_uris</full_name>
        <docblock line="599">
          <description><![CDATA[Flattens the service array.]]></description>
          <long-description><![CDATA[<p>In an XRDS document, child elements of the service element often contains
a list of URIs, with the priority specified in the priority attribute.</p>

<p>When the document is parsed in this class, the URI and the priority are first
extracted into the #uri and the #priority keys respectively.  This function
takes this array, sorts the elements using the #priority keys (if $sort is
true), then collapses the array using the value associated with the #uri key.</p>]]></long-description>
          <tag line="599" name="param" description="the service array, with URIs and priorities" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="599" name="param" description="whether to sort the service array using the #priority keys" type="bool" variable="$sort">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="599" name="return" description="the services array with URIs sorted by priority" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="599" name="access" description="protected"/>
        </docblock>
        <argument line="616">
          <name>$array</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="616">
          <name>$sort</name>
          <default><![CDATA[TRUE]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="486" code="50015">Argument $parser is missing from the Docblock of element_start()</error>
      <error line="486" code="50015">Argument $qualified is missing from the Docblock of element_start()</error>
      <error line="486" code="50015">Argument $attribs is missing from the Docblock of element_start()</error>
      <error line="528" code="50015">Argument $parser is missing from the Docblock of element_end()</error>
      <error line="528" code="50015">Argument $qualified is missing from the Docblock of element_end()</error>
      <error line="575" code="50015">Argument $parser is missing from the Docblock of cdata()</error>
      <error line="575" code="50015">Argument $data is missing from the Docblock of cdata()</error>
    </parse_markers>
  </file>
  <file path="www/bignum.inc.php" hash="39492bcd104ae5993bf74332746179fe" package="simpleid">
    <docblock line="24">
      <description><![CDATA[Abstraction library for multiple precision mathematics.]]></description>
      <long-description><![CDATA[<p>This file uses either
the GNU Multiple Precision Arithmic Libary (GMP) if it is installed, or the
default BCMath library if it is not installed.</p>]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="41" package="simpleid">
      <name>BIGNUM_GMP</name>
      <full_name>\BIGNUM_GMP</full_name>
      <value><![CDATA[false]]></value>
      <docblock line="40">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="40" name="ignore" description=""/>
      </docblock>
    </constant>
    <function namespace="global" line="50" package="simpleid">
      <name>bignum_loaded</name>
      <full_name>\bignum_loaded</full_name>
      <docblock line="44">
        <description><![CDATA[Returns whether either the GMP or the BCMath library is installed.]]></description>
        <long-description><![CDATA[<p>If neither
of these libraries are installed, the functions in this file will not work.</p>]]></long-description>
        <tag line="44" name="return" description="true if either GMP or BCMath is installed." type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="61" package="simpleid">
      <name>bignum_new</name>
      <full_name>\bignum_new</full_name>
      <docblock line="54">
        <description><![CDATA[Creates a bignum.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="54" name="param" description="An integer, a string in base 2 to 36, or a byte stream in base 256" type="mixed" variable="$str">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="54" name="param" description="an integer between 2 and 36, or 256" type="int" variable="$base">
          <type by_reference="false">int</type>
        </tag>
        <tag line="54" name="return" description="a bignum" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="61">
        <name>$str</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="61">
        <name>$base</name>
        <default><![CDATA[10]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="104" package="simpleid">
      <name>bignum_val</name>
      <full_name>\bignum_val</full_name>
      <docblock line="96">
        <description><![CDATA[Converts a bignum into a string representation (base 2 to 36) or a byte stream
(base 256)]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="96" name="param" description="the bignum" type="resource" variable="$num">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="96" name="param" description="an integer between 2 and 36, or 256" type="int" variable="$base">
          <type by_reference="false">int</type>
        </tag>
        <tag line="96" name="return" description="the converted bignum" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="104">
        <name>$num</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="104">
        <name>$base</name>
        <default><![CDATA[10]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="176" package="simpleid">
      <name>bignum_add</name>
      <full_name>\bignum_add</full_name>
      <docblock line="169">
        <description><![CDATA[Adds two bignums]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="169" name="param" description="" type="resource" variable="$a">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="169" name="param" description="" type="resource" variable="$b">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="169" name="return" description="a bignum representing a + b" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="176">
        <name>$a</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="176">
        <name>$b</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="191" package="simpleid">
      <name>bignum_mul</name>
      <full_name>\bignum_mul</full_name>
      <docblock line="184">
        <description><![CDATA[Multiplies two bignums]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="184" name="param" description="" type="resource" variable="$a">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="184" name="param" description="" type="resource" variable="$b">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="184" name="return" description="a bignum representing a * b" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="191">
        <name>$a</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="191">
        <name>$b</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="206" package="simpleid">
      <name>bignum_div</name>
      <full_name>\bignum_div</full_name>
      <docblock line="199">
        <description><![CDATA[Divides two bignums]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="199" name="param" description="" type="resource" variable="$a">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="199" name="param" description="" type="resource" variable="$b">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="199" name="return" description="a bignum representing a / b" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="206">
        <name>$a</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="206">
        <name>$b</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="221" package="simpleid">
      <name>bignum_pow</name>
      <full_name>\bignum_pow</full_name>
      <docblock line="214">
        <description><![CDATA[Raise base to power exp]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="214" name="param" description="the base" type="resource" variable="$base">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="214" name="param" description="the exponent, as an integer or a bignum" type="mixed" variable="$exp">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="214" name="return" description="a bignum representing base ^ exp" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="221">
        <name>$base</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="221">
        <name>$exp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="237" package="simpleid">
      <name>bignum_mod</name>
      <full_name>\bignum_mod</full_name>
      <docblock line="230">
        <description><![CDATA[Returns n modulo d]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="230" name="param" description="" type="resource" variable="$n">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="230" name="param" description="" type="resource" variable="$d">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="230" name="return" description="a bignum representing n mod d" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="237">
        <name>$n</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="237">
        <name>$d</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="253" package="simpleid">
      <name>bignum_powmod</name>
      <full_name>\bignum_powmod</full_name>
      <docblock line="245">
        <description><![CDATA[Raise a number into power with modulo]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="245" name="param" description="the base" type="resource" variable="$base">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="245" name="param" description="the exponent" type="resource" variable="$exp">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="245" name="param" description="the modulo" type="resource" variable="$mod">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="245" name="return" description="a bignum representing base ^ exp mod mod" type="resource">
          <type by_reference="false">resource</type>
        </tag>
      </docblock>
      <argument line="253">
        <name>$base</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="253">
        <name>$exp</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="253">
        <name>$mod</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="279" package="simpleid">
      <name>bignum_cmp</name>
      <full_name>\bignum_cmp</full_name>
      <docblock line="272">
        <description><![CDATA[Compares two bignum]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="272" name="param" description="" type="resource" variable="$a">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="272" name="param" description="" type="resource" variable="$b">
          <type by_reference="false">resource</type>
        </tag>
        <tag line="272" name="return" description="positive value if a &gt; b, zero if a = b and a negative value if a &lt; b" type="int">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="279">
        <name>$a</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="279">
        <name>$b</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="www/filesystem.store.php" hash="764ecf45041437664c7cc71e27e21bb9" package="simpleid">
    <docblock line="24">
      <description><![CDATA[Functions for persistent storage via the file system.]]></description>
      <long-description><![CDATA[<p>In general, there are three different sets of data which SimpleID needs
to store:</p>

<ul>
<li>transient data (e.g. OpenID associations, sessions, auto-login)</li>
<li>application data (e.g. salt for form tokens)</li>
<li>user data (e.g. user names, passwords and settings)</li>
</ul>

<p>Prior to version 0.7, both transient data and application data are stored
using {@link cache.inc}.  From version 0.7, application data are now
stored separately from the cache.</p>

<p>Prior to version 0.7, user data is only stored in the identity file, to which
SimpleID cannot write.  This means that if the user wishes to change a setting,
he or she will need to edit the identity file manually.  Other user settings
(e.g. RP preferences) are stored using {@link cache.inc}</p>

<p>From version 0.7, user data is stored in two files, one is the identity
file, the other is the user store file, which SimpleID can write.</p>]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <function namespace="global" line="64" package="simpleid">
      <name>store_user_exists</name>
      <full_name>\store_user_exists</full_name>
      <docblock line="58">
        <description><![CDATA[Returns whether the user name exists in the user store.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="58" name="param" description="the name of the user to check" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="58" name="return" description="whether the user name exists" type="bool">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <argument line="64">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="82" package="simpleid">
      <name>store_user_load</name>
      <full_name>\store_user_load</full_name>
      <docblock line="73">
        <description><![CDATA[Loads user data for a specified user name.]]></description>
        <long-description><![CDATA[<p>The user name must exist.  You should check whether the user name exists with
the {@link store_user_exists()} function</p>]]></long-description>
        <tag line="73" name="param" description="the name of the user to load" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="73" name="return" description="data for the specified user" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="82">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="112" package="simpleid">
      <name>store_user_updated_time</name>
      <full_name>\store_user_updated_time</full_name>
      <docblock line="98">
        <description><![CDATA[Returns the time which a user's data has been updated.]]></description>
        <long-description><![CDATA[<p>The user name must exist.  You should check whether the user name exists with
the {@link store_user_exists()} function.</p>

<p>The time returned can be based on the identity file,
the user store file, or the latter of the two.</p>]]></long-description>
        <tag line="98" name="param" description="the name of the user to obtain the update time" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="98" name="param" description="one of: 'identity' (identity file), 'usrstore' (user store file) or NULL (latter of the two)" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="98" name="return" description="the updated time" type="int">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="112">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="112">
        <name>$type</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="144" package="simpleid">
      <name>store_get_uid</name>
      <full_name>\store_get_uid</full_name>
      <docblock line="137">
        <description><![CDATA[Finds the user name from a specified OpenID Identity URI.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="137" name="param" description="the Identity URI of the user to load" type="string" variable="$identity">
          <type by_reference="false">string</type>
        </tag>
        <tag line="137" name="return" description="the user name for the Identity URI, or NULL if no user has the specified Identity URI" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="144">
        <name>$identity</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="184" package="simpleid">
      <name>store_get_uid_from_cert</name>
      <full_name>\store_get_uid_from_cert</full_name>
      <docblock line="172">
        <description><![CDATA[Finds the user name from a specified client SSL certificate string.]]></description>
        <long-description><![CDATA[<p>The client SSL certificate string comprises the certificate's serial number
(in capitals hex notation) and the distinguished name of the certificate's issuer
(with components joined using slashes), joined using a semi-colon.</p>]]></long-description>
        <tag line="172" name="param" description="the client SSL certificate string of the user to load" type="string" variable="$cert">
          <type by_reference="false">string</type>
        </tag>
        <tag line="172" name="return" description="the user name matching the client SSL certificate string, or NULL if no user has client SSL certificate string" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="184">
        <name>$cert</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="234" package="simpleid">
      <name>store_user_save</name>
      <full_name>\store_user_save</full_name>
      <docblock line="222">
        <description><![CDATA[Saves user data for a specific user name.]]></description>
        <long-description><![CDATA[<p>This data is stored in the user store file.</p>]]></long-description>
        <tag line="222" name="param" description="the name of the user" type="string" variable="$uid">
          <type by_reference="false">string</type>
        </tag>
        <tag line="222" name="param" description="the data to save" type="array" variable="$data">
          <type by_reference="false">array</type>
        </tag>
        <tag line="222" name="param" description="an array of keys to exclude from the user store file. These are generally keys which are stored in the identity file." type="array" variable="$exclude">
          <type by_reference="false">array</type>
        </tag>
        <tag line="222" name="since" description="0.7"/>
      </docblock>
      <argument line="234">
        <name>$uid</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="234">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="234">
        <name>$exclude</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="258" package="simpleid">
      <name>store_get</name>
      <full_name>\store_get</full_name>
      <docblock line="250">
        <description><![CDATA[Loads an application setting.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="250" name="param" description="the name of the setting to return" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="250" name="param" description="the default value to use if this variable has never been set" type="mixed" variable="$default">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="250" name="return" description="the value of the setting" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="258">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="258">
        <name>$default</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="283" package="simpleid">
      <name>store_set</name>
      <full_name>\store_set</full_name>
      <docblock line="276">
        <description><![CDATA[Saves an application setting.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="276" name="param" description="the name of the setting to save" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="276" name="param" description="the value of the setting" type="mixed" variable="$value">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="283">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="283">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="305" package="simpleid">
      <name>store_del</name>
      <full_name>\store_del</full_name>
      <docblock line="299">
        <description><![CDATA[Deletes an application setting.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="299" name="param" description="the name of the setting to delete" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="305">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="329" package="simpleid">
      <name>_store_is_valid_name</name>
      <full_name>\_store_is_valid_name</full_name>
      <docblock line="319">
        <description><![CDATA[Determines whether a name is a valid name for use with this store.]]></description>
        <long-description><![CDATA[<p>For file system storage, a name is not valid if it contains either a
directory separator (i.e. / or &#41;.</p>]]></long-description>
        <tag line="319" name="param" description="the name to check" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="319" name="return" description="whether the name is valid for use with this store" type="boolean">
          <type by_reference="false">boolean</type>
        </tag>
      </docblock>
      <argument line="329">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="www/random.inc.php" hash="bd736f01e5684b0290586c6809957096" package="simpleid">
    <docblock line="24">
      <description><![CDATA[Functions related to generating random bits and unique values.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="since" description="0.8"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="37" package="simpleid">
      <name>SIMPLEID_RAND_SOURCE</name>
      <full_name>\SIMPLEID_RAND_SOURCE</full_name>
      <value><![CDATA['/dev/urandom']]></value>
      <docblock line="33">
        <description><![CDATA[The source of random bits.]]></description>
        <long-description><![CDATA[<p>On Unix-like systems, this could be /dev/random
or /dev/urandom</p>]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="48" package="simpleid">
      <name>random_bytes</name>
      <full_name>\random_bytes</full_name>
      <docblock line="40">
        <description><![CDATA[Obtains a number of random bytes.]]></description>
        <long-description><![CDATA[<p>This function uses an entropy source specified
in SIMPLEID_RAND_SOURCE.  If SIMPLEID_RAND_SOURCE is not available, the mt_rand()
PHP function is used</p>]]></long-description>
        <tag line="40" name="param" description="the number of bytes to generate" type="int" variable="$num_bytes">
          <type by_reference="false">int</type>
        </tag>
        <tag line="40" name="return" description="a string containing random bytes" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="48">
        <name>$num_bytes</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="85" package="simpleid">
      <name>random_secret</name>
      <full_name>\random_secret</full_name>
      <docblock line="70">
        <description><![CDATA[Obtains a random string of a specified number of bytes of entropy.]]></description>
        <long-description><![CDATA[<p>The function calls the {@link random_bytes()} function with the specified
number of bytes, then converts to a string containing only alphanumeric
characters (case sensitive), plus the characters ., _ and -.</p>

<p>The conversion method is based on the Base64 encoding.  However, non-standard
characters are used so that users are not confused and attempt to decode
the returned string.</p>]]></long-description>
        <tag line="70" name="param" description="the approximate number of bytes of entropy in the random string" type="int" variable="$num_bytes">
          <type by_reference="false">int</type>
        </tag>
        <tag line="70" name="return" description="the random string" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="85">
        <name>$num_bytes</name>
        <default><![CDATA[32]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="100" package="simpleid">
      <name>random_id</name>
      <full_name>\random_id</full_name>
      <docblock line="91">
        <description><![CDATA[Generates a relatively unique identifier which can be used as, among other things,
an OpenID association handle or an OAuth client identifier.]]></description>
        <long-description><![CDATA[<p>The identifier
returned is at least 24 characters long and contains only hexadecimal characters.</p>

<p>Note that the identifier returned is not cryptographically secure.</p>]]></long-description>
        <tag line="91" name="return" description="a relatively unique identifier" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
    </function>
  </file>
  <file path="www/http.inc.php" hash="9cb5e49df67057cb4067582726107aab" package="simpleid">
    <docblock line="24">
      <description><![CDATA[Functions for making and processing HTTP requests.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="since" description="0.7"/>
      <tag line="24" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="35" package="simpleid">
      <name>SIMPLEHTTP_USER_AGENT</name>
      <full_name>\SIMPLEHTTP_USER_AGENT</full_name>
      <value><![CDATA['SimpleHTTP/' . substr('$Rev$', 6, -2)]]></value>
      <docblock line="32">
        <description><![CDATA[The user agent to use during HTTP requests.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
    <function namespace="global" line="58" package="simpleid">
      <name>http_make_request</name>
      <full_name>\http_make_request</full_name>
      <docblock line="37">
        <description><![CDATA[Performs an HTTP request.]]></description>
        <long-description><![CDATA[<p>Communication with the web server is conducted using libcurl where possible.
Where libcurl does not exist, then sockets will be used.</p>

<p>Note that the request must be properly prepared before passing onto this function.
For example, for POST requests, the Content-Type and Content-Length headers must be
included in $headers.</p>]]></long-description>
        <tag line="37" name="param" description="the URL" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="37" name="param" description="HTTP headers containing name =&gt; value pairs" type="array" variable="$headers">
          <type by_reference="false">array</type>
        </tag>
        <tag line="37" name="param" description="the request body" type="string" variable="$body">
          <type by_reference="false">string</type>
        </tag>
        <tag line="37" name="param" description="the HTTP request method" type="string" variable="$method">
          <type by_reference="false">string</type>
        </tag>
        <tag line="37" name="param" description="the maximum number of redirects allowed" type="int" variable="$retry">
          <type by_reference="false">int</type>
        </tag>
        <tag line="37" name="return" description="containing keys 'error-code' (for communication errors), 'error' (for communication errors), 'data' (content returned), 'code' (the HTTP status code), 'http-error' (if the HTTP status code is not 200 or 304), 'protocol' (the HTTP protocol in the response), 'headers' (an array of return headers in lowercase), 'content-type' (the HTTP content-type returned)" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="58">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="58">
        <name>$headers</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
      <argument line="58">
        <name>$body</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="58">
        <name>$method</name>
        <default><![CDATA['GET']]></default>
        <type/>
      </argument>
      <argument line="58">
        <name>$retry</name>
        <default><![CDATA[3]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="99" package="simpleid">
      <name>http_protocols</name>
      <full_name>\http_protocols</full_name>
      <docblock line="90">
        <description><![CDATA[Returns the protocols currently supported for making remote requests.]]></description>
        <long-description><![CDATA[<p>If libcurl is used, this function returns a list of protocols supported by the
included build of the library.  If libcurl is not used, then HTTP is the
only protocol supported.</p>]]></long-description>
        <tag line="90" name="return" description="an array of protocols" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="121" package="simpleid">
      <name>_http_make_request_curl</name>
      <full_name>\_http_make_request_curl</full_name>
      <docblock line="108">
        <description><![CDATA[Performs an HTTP request using libcurl.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="108" name="param" description="the URL" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="108" name="param" description="HTTP headers containing name =&gt; value pairs" type="array" variable="$headers">
          <type by_reference="false">array</type>
        </tag>
        <tag line="108" name="param" description="the request body" type="string" variable="$body">
          <type by_reference="false">string</type>
        </tag>
        <tag line="108" name="param" description="the HTTP request method" type="string" variable="$method">
          <type by_reference="false">string</type>
        </tag>
        <tag line="108" name="param" description="the maximum number of redirects allowed" type="int" variable="$retry">
          <type by_reference="false">int</type>
        </tag>
        <tag line="108" name="return" description="containing keys 'error-code' (for communication errors), 'error' (for communication errors), 'data' (content returned), 'code' (the HTTP status code), 'http-error' (if the HTTP status code is not 200 or 304), 'headers' (an array of return headers), 'content-type' (the HTTP content-type returned)" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="121">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="121">
        <name>$headers</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
      <argument line="121">
        <name>$body</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="121">
        <name>$method</name>
        <default><![CDATA['GET']]></default>
        <type/>
      </argument>
      <argument line="121">
        <name>$retry</name>
        <default><![CDATA[3]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="215" package="simpleid">
      <name>_http_make_request_fsock</name>
      <full_name>\_http_make_request_fsock</full_name>
      <docblock line="202">
        <description><![CDATA[Performs an HTTP request using sockets.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="202" name="param" description="the URL" type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="202" name="param" description="HTTP headers containing name =&gt; value pairs" type="array" variable="$headers">
          <type by_reference="false">array</type>
        </tag>
        <tag line="202" name="param" description="the request body" type="string" variable="$body">
          <type by_reference="false">string</type>
        </tag>
        <tag line="202" name="param" description="the HTTP request method" type="string" variable="$method">
          <type by_reference="false">string</type>
        </tag>
        <tag line="202" name="param" description="the maximum number of redirects allowed" type="int" variable="$retry">
          <type by_reference="false">int</type>
        </tag>
        <tag line="202" name="return" description="containing keys 'error-code' (for communication errors), 'error' (for communication errors), 'data' (content returned), 'code' (the HTTP status code), 'http-error' (if the HTTP status code is not 200 or 304), 'headers' (an array of return headers), 'content-type' (the HTTP content-type returned)" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="215">
        <name>$url</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="215">
        <name>$headers</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
      <argument line="215">
        <name>$body</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="215">
        <name>$method</name>
        <default><![CDATA['GET']]></default>
        <type/>
      </argument>
      <argument line="215">
        <name>$retry</name>
        <default><![CDATA[3]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="316" package="simpleid">
      <name>_http_parse_headers</name>
      <full_name>\_http_parse_headers</full_name>
      <docblock line="306">
        <description><![CDATA[Parses HTTP response headers.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="306" name="param" description="the unparsed header block" type="string" variable="$header_block">
          <type by_reference="false">string</type>
        </tag>
        <tag line="306" name="param" description="if true, use simplified parsing as libcurl already parses the headers" type="bool" variable="$curl">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="306" name="return" description="array containing the following keys: 'protocol' (the HTTP protocol in the response), 'headers' (an array of return headers in lowercase). If $curl is false, additional parsing is done for 'code' and 'content-type'" type="\an">
          <type by_reference="false">\an</type>
        </tag>
      </docblock>
      <argument line="316">
        <name>$header_block</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="316">
        <name>$curl</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="www/page.inc.php" hash="70efdd131d981cfedf5058ede4346d2b" package="simpleid">
    <docblock line="24">
      <description><![CDATA[Functions for displaying various pages in SimpleID.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
      <tag line="24" name="filesource" description=""/>
      <tag line="24" name="since" description="0.7"/>
    </docblock>
    <function namespace="global" line="35" package="simpleid">
      <name>page_dashboard</name>
      <full_name>\page_dashboard</full_name>
      <docblock line="32">
        <description><![CDATA[Displays the dashboard page.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="66" package="simpleid">
      <name>page_profile</name>
      <full_name>\page_profile</full_name>
      <docblock line="63">
        <description><![CDATA[Displays the profile page.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="100" package="simpleid">
      <name>page_sites</name>
      <full_name>\page_sites</full_name>
      <docblock line="97">
        <description><![CDATA[Returns the user's home page.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="207" package="simpleid">
      <name>_page_sites_sort</name>
      <full_name>\_page_sites_sort</full_name>
      <docblock line="195">
        <description><![CDATA[A custom sort function for realms.]]></description>
        <long-description><![CDATA[<p>This strips out the following:</p>

<ul>
<li>http://</li>
<li>https://</li>
<li>www.</li>
<li>*.</li>
</ul>]]></long-description>
        <tag line="195" name="param" description="" type="string" variable="$a">
          <type by_reference="false">string</type>
        </tag>
        <tag line="195" name="param" description="" type="string" variable="$b">
          <type by_reference="false">string</type>
        </tag>
        <tag line="195" name="return" description="" type="int">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="207">
        <name>$a</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="207">
        <name>$b</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="216" package="simpleid">
      <name>page_nav</name>
      <full_name>\page_nav</full_name>
      <docblock line="213">
        <description><![CDATA[Set up the navigation section in the header]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
    <function namespace="global" line="239" package="simpleid">
      <name>page_render_block</name>
      <full_name>\page_render_block</full_name>
      <docblock line="233">
        <description><![CDATA[Renders a particular block.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="233" name="param" description="the block to render" type="array" variable="$block">
          <type by_reference="false">array</type>
        </tag>
        <tag line="233" name="return" description="the HTML of the rendered block" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="239">
        <name>$block</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="263" package="simpleid">
      <name>_page_welcome_block</name>
      <full_name>\_page_welcome_block</full_name>
      <docblock line="258">
        <description><![CDATA[Returns the welcome block.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="258" name="return" description="the welcome block" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="278" package="simpleid">
      <name>_page_dashboard_otp_block</name>
      <full_name>\_page_dashboard_otp_block</full_name>
      <docblock line="273">
        <description><![CDATA[Returns the dashboard OTP block.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="273" name="return" description="the dashboard OTP block" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="307" package="simpleid">
      <name>_page_discovery_block</name>
      <full_name>\_page_discovery_block</full_name>
      <docblock line="302">
        <description><![CDATA[Returns a block containing discovery information.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="302" name="return" description="the discovery block" type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
  </file>
  <file path="www/config.default.php" hash="f47666789d496a4779a19f9fa92490ab" package="simpleid">
    <docblock line="29">
      <description><![CDATA[Default configuration settings]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="29" name="package" description="simpleid"/>
      <tag line="29" name="filesource" description=""/>
    </docblock>
    <constant namespace="global" line="45" package="simpleid">
      <name>$name</name>
      <full_name>\$name</full_name>
      <value><![CDATA[$value]]></value>
    </constant>
    <function namespace="global" line="43" package="simpleid">
      <name>define_default</name>
      <full_name>\define_default</full_name>
      <docblock line="36">
        <description><![CDATA[Define a constant if it has not been defined already.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="36" name="param" description="string the name of the constant" type="\$name" variable="$name">
          <type by_reference="false">\$name</type>
        </tag>
        <tag line="36" name="param" description="mixed the value of the constant - only scalar and null values are allowed" type="\$value" variable="$value">
          <type by_reference="false">\$value</type>
        </tag>
      </docblock>
      <argument line="43">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="43">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <file path="www/config.pear.php" hash="1fc5b524e036928c90bbb3e00f8a6491" package="pear">
    <docblock line="24">
      <description><![CDATA[Proxy for {@link config.php} for PEAR installations.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="pear"/>
    </docblock>
    <include line="30" type="Include Once" package="simpleid">
      <name>PEAR/Config.php</name>
    </include>
    <include line="33" type="Include Once" package="simpleid">
      <name/>
    </include>
  </file>
  <file path="www/simpleweb.inc.php" hash="0e24edaf5c57198510249853b58a9aa0" package="simpleweb">
    <docblock line="24">
      <description><![CDATA[Simpleweb is a minimalist web framework.]]></description>
      <long-description><![CDATA[<p>It is similar to {@link http://webpy.org web.py},
but in PHP.</p>

<p>The key to Simpleweb is the <i>route array</i>.  The route array is an array that maps
URLs (called <i>patterns</i>) to PHP functions or methods (called <i>routes</i>).</p>

<p>Patterns are regular expressions, which are tested against the URL one at a time.
Subpatterns (i.e. patterns within parentheses) are then passed on as arguments
to the route.</p>

<p>Routes are either functions, static methods or object methods.  A function is
denoted by the function name.  A static method is denoted by the class name,
followed by :: then the method name.  An object method is denoted by the class
name, followed by -&gt; then the method name.  An instance of the class will be
created before an object method is called.</p>

<p>An example of a routes array is given below:</p>

<pre><code><?php
$routes = array(
    'a' => 'function1',
    'b/(.+)' => 'function2',   // arguments
    'c' => 'ClassA::method',   // static method
    'd' => 'ClassB->method',   // object method
);
?>
</code></pre>

<p>Once the route array is populated, the {@link simpleweb_run()} function
is then called to handle the URL.</p>]]></long-description>
      <tag line="24" name="package" description="simpleweb"/>
      <tag line="24" name="since" description="0.7"/>
    </docblock>
    <function namespace="global" line="73" package="simpleweb">
      <name>simpleweb_run</name>
      <full_name>\simpleweb_run</full_name>
      <docblock line="61">
        <description><![CDATA[Handles a supplied request, based on a set of routes.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="61" name="param" description="the routes array, as described in {@link simpleweb.inc this page}" type="array" variable="$routes">
          <type by_reference="false">array</type>
        </tag>
        <tag line="61" name="param" description="the request path against which the routes are applied. If NULL, then the request URI supplied by the web server will be used." type="string" variable="$request_path">
          <type by_reference="false">string</type>
        </tag>
        <tag line="61" name="param" description="the default route if none of the patterns match. If NULL, then an HTTP 404 error is raised" type="string" variable="$not_found_route">
          <type by_reference="false">string</type>
        </tag>
        <tag line="61" name="return" description="the result from calling the route." type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="73">
        <name>$routes</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="73">
        <name>$request_path</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
      <argument line="73">
        <name>$not_found_route</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="119" package="simpleweb">
      <name>_simpleweb_invoke</name>
      <full_name>\_simpleweb_invoke</full_name>
      <docblock line="112">
        <description><![CDATA[Invokes a route.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="112" name="param" description="the route" type="string" variable="$route">
          <type by_reference="false">string</type>
        </tag>
        <tag line="112" name="param" description="the arguments" type="array" variable="$args">
          <type by_reference="false">array</type>
        </tag>
        <tag line="112" name="return" description="the result from calling the route." type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="119">
        <name>$route</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="119">
        <name>$args</name>
        <default><![CDATA[array()]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="135" package="simpleweb">
      <name>_simpleweb_not_found</name>
      <full_name>\_simpleweb_not_found</full_name>
      <docblock line="132">
        <description><![CDATA[Displays a HTTP 404 Not Found error and exits.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </function>
  </file>
  <file path="www/version.inc.php" hash="204a5c8e9b8d49be63ea75ea7f990b6d" package="simpleid">
    <docblock line="24">
      <description><![CDATA[Defines the current version of SimpleID.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="24" name="package" description="simpleid"/>
    </docblock>
    <constant namespace="global" line="33" package="simpleid">
      <name>SIMPLEID_VERSION</name>
      <full_name>\SIMPLEID_VERSION</full_name>
      <value><![CDATA['@@BUILD_VERSION@@']]></value>
      <docblock line="30">
        <description><![CDATA[The current version of SimpleID]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </constant>
  </file>
  <file path="www/cache.inc.php" hash="fd45ec68dcef28cfd63fcf8944535660" package="simpleid">
    <docblock line="30">
      <description><![CDATA[Functions for caching and persistence.]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="30" name="package" description="simpleid"/>
      <tag line="30" name="filesource" description=""/>
    </docblock>
    <function namespace="global" line="46" package="simpleid">
      <name>cache_set</name>
      <full_name>\cache_set</full_name>
      <docblock line="37">
        <description><![CDATA[Stores data into the cache.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="37" name="param" description="the type of data in the cache" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="37" name="param" description="an identifier" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="37" name="param" description="the data to store" type="mixed" variable="$data">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="37" name="param" description="if present, sets the modification time of the cache file to this time" type="int" variable="$time">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <argument line="46">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="46">
        <name>$key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="46">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="46">
        <name>$time</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="66" package="simpleid">
      <name>cache_get</name>
      <full_name>\cache_get</full_name>
      <docblock line="58">
        <description><![CDATA[Obtains data from the cache.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="58" name="param" description="the type of data in the cache" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="58" name="param" description="an identifier" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="58" name="return" description="the data associated with the type and key, or NULL if the cache does not contain the requested data." type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="66">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="66">
        <name>$key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="81" package="simpleid">
      <name>cache_get_all</name>
      <full_name>\cache_get_all</full_name>
      <docblock line="74">
        <description><![CDATA[Obtains all data of a particular type from the cache.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="74" name="param" description="the type of data in the cache" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="74" name="return" description="an array of data associated with the type, or NULL if the cache does not contain the requested data." type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="81">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="105" package="simpleid">
      <name>cache_delete</name>
      <full_name>\cache_delete</full_name>
      <docblock line="99">
        <description><![CDATA[Deletes data from the cache.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="99" name="param" description="the type of data in the cache" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="99" name="param" description="an identifier" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="105">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="105">
        <name>$key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="120" package="simpleid">
      <name>cache_gc</name>
      <full_name>\cache_gc</full_name>
      <docblock line="110">
        <description><![CDATA[Garbage collects data stored the cache.]]></description>
        <long-description><![CDATA[<p>Data is deleted if it was stored
for longer than the specified expiry.</p>

<p>This function is deprecated, use {@link cache_expire()}.</p>]]></long-description>
        <tag line="110" name="param" description="the expiry time, in seconds, after which data will be deleted" type="int" variable="$expiry">
          <type by_reference="false">int</type>
        </tag>
        <tag line="110" name="param" description="the type of data in the cache" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="110" name="deprecated" description=""/>
      </docblock>
      <argument line="120">
        <name>$expiry</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="120">
        <name>$type</name>
        <default><![CDATA[NULL]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="157" package="simpleid">
      <name>cache_expire</name>
      <full_name>\cache_expire</full_name>
      <docblock line="142">
        <description><![CDATA[Garbage collects data stored the cache.]]></description>
        <long-description><![CDATA[<p>Data is deleted if it was stored
for longer than the specified expiry.</p>

<p>The parameter to this function takes either an integer or an array.  If the
parameter is an integer, everything in the cache older than the specified
time (in seconds) will be deleted.  If the parameter is an array,
cache items of the type specified in the key to the array, older than the
corresponding value will be deleted.</p>

<p>This function is deprecated, use {@link cache_expire()}.</p>]]></long-description>
        <tag line="142" name="param" description="the expiry time, in seconds, after which data will be deleted, or an array specifiying the expiry time for each type" type="int|array" variable="$params">
          <type by_reference="false">int</type>
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <argument line="157">
        <name>$params</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="195" package="simpleid">
      <name>cache_ttl</name>
      <full_name>\cache_ttl</full_name>
      <docblock line="183">
        <description><![CDATA[Returns the time remaining, in seconds, before the data associated with the
type and key become subject to garbage collection by {@link cache_gc()}.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="183" name="param" description="the type of data in the cache" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="183" name="param" description="an identifier" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="183" name="param" description="the expiry time, in seconds, which would be passed onto the {@link cache_gc()} function" type="int" variable="$expiry">
          <type by_reference="false">int</type>
        </tag>
        <tag line="183" name="return" description="the time remaining before expiry, rounded downwards, or zero if the cache does not contain the requested data" type="int">
          <type by_reference="false">int</type>
        </tag>
        <tag line="183" name="since" description="0.8"/>
      </docblock>
      <argument line="195">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="195">
        <name>$key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="195">
        <name>$expiry</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="210" package="simpleid">
      <name>_cache_get_name</name>
      <full_name>\_cache_get_name</full_name>
      <docblock line="203">
        <description><![CDATA[Returns the name of the cache data file, given a type and an identifier.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="203" name="param" description="the type of data in the cache" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="203" name="param" description="an identifier" type="string" variable="$key">
          <type by_reference="false">string</type>
        </tag>
        <tag line="203" name="return" description="a file name" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="210">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
      <argument line="210">
        <name>$key</name>
        <default><![CDATA[]]></default>
        <type/>
      </argument>
    </function>
  </file>
  <package name="extensions" full_name="extensions"/>
  <package name="pear" full_name="pear"/>
  <package name="simpleid" full_name="simpleid">
    <package name="extensions" full_name="simpleid\extensions"/>
  </package>
  <package name="simpleweb" full_name="simpleweb"/>
  <namespace name="global" full_name="global"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="3"/>
</project>
